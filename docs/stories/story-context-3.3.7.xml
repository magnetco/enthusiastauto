<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.7</storyId>
    <title>Vehicle Contact Form & Lead Capture</title>
    <status>Ready</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-3.7.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>potential vehicle buyer</asA>
    <iWant>to message the seller directly from the vehicle detail page with a contact form</iWant>
    <soThat>I can inquire about the vehicle, express interest, and receive personalized follow-up without navigating away from the listing</soThat>
    <tasks>
      <task id="1" ac="AC1,AC2,AC3,AC4">
        <title>Create VehicleContactForm component</title>
        <subtasks>14</subtasks>
        <summary>Create Client Component with React Hook Form, Zod validation, form fields (First Name, Last Name, Email, Phone, Message, checkboxes), two-column grid layout, auto-fill logic, character counter, loading states</summary>
      </task>
      <task id="2" ac="AC5">
        <title>Create contact form API route</title>
        <subtasks>10</subtasks>
        <summary>POST endpoint at /api/contact/vehicle accepting JSON payload, Zod validation, fetch vehicle from Sanity, construct email HTML, send via Resend, rate limiting (10 req/hour per IP)</summary>
      </task>
      <task id="3" ac="AC5">
        <title>Design email template</title>
        <subtasks>10</subtasks>
        <summary>Email HTML/text template with vehicle image thumbnail, vehicle details, inquiry details, trade-in/price drop info, CTA button, reply-to header, timestamp footer</summary>
      </task>
      <task id="4" ac="AC6">
        <title>Integrate form validation</title>
        <subtasks>7</subtasks>
        <summary>Zod schema with field validation rules (firstName/lastName min 2 max 50, email format, phone optional 10-15 digits, message min 10 max 1000), inline error messages, toast notifications for API errors</summary>
      </task>
      <task id="5" ac="AC7">
        <title>Implement success confirmation</title>
        <subtasks>6</subtasks>
        <summary>Success toast notification, optional form clear/redirect, localStorage to prevent duplicate submissions, 60-second submit button disable, "Send Another Message" button</summary>
      </task>
      <task id="6" ac="AC1,AC8">
        <title>Replace ContactInquiry component integration</title>
        <subtasks>7</subtasks>
        <summary>Update app/vehicles/[slug]/page.tsx to use VehicleContactForm, pass vehicle data props, conditional rendering (current vs sold), position in sidebar, responsive behavior</summary>
      </task>
      <task id="7" ac="AC5">
        <title>Add environment configuration</title>
        <subtasks>5</subtasks>
        <summary>Add SALES_EMAIL to .env.local/.env.example, document in README, verify RESEND_API_KEY, add NEXT_PUBLIC_SITE_URL, update Vercel env vars</summary>
      </task>
      <task id="8" ac="All">
        <title>Create TypeScript types</title>
        <subtasks>4</subtasks>
        <summary>Create types/contact.ts with VehicleInquiryFormData, VehicleInquiryEmailPayload, VehicleInquiryResponse interfaces</summary>
      </task>
      <task id="9" ac="All">
        <title>Write tests for contact form</title>
        <subtasks>10</subtasks>
        <summary>Unit tests (component rendering, validation, auto-fill, submission), integration tests (API validation, email sending), E2E tests (full submission flow, sold vehicle handling)</summary>
      </task>
      <task id="10" ac="All">
        <title>UI/UX polish and accessibility</title>
        <subtasks>10</subtasks>
        <summary>Match screenshot design, ARIA labels, keyboard navigation, focus states, 44x44px touch targets, screen reader compatibility, loading spinner aria-live, color contrast WCAG AA, honeypot spam prevention</summary>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1">Contact Form Component - Vehicle detail pages display an inline contact form with fields for First Name, Last Name, Email Address, Phone (optional), and Message</criterion>
    <criterion id="AC2">Auto-Filled Message - Message textarea pre-populates with vehicle-specific inquiry text including vehicle title, price, and listing source</criterion>
    <criterion id="AC3">Trade-In Option - Form includes optional checkbox "Do you have a trade-in?" to capture trade-in interest</criterion>
    <criterion id="AC4">Price Drop Alerts - Form includes optional checkbox "Email me price drops for this vehicle" for lead nurturing</criterion>
    <criterion id="AC5">Email Delivery - Form submission sends email to sales team (configurable recipient) via Resend with all form data and vehicle details</criterion>
    <criterion id="AC6">Validation &amp; Error Handling - Form validates required fields (name, email, message) with inline error messages and handles submission failures gracefully</criterion>
    <criterion id="AC7">Success Confirmation - Successful submission shows confirmation message and optionally clears form or redirects</criterion>
    <criterion id="AC8">Sold Vehicle Handling - Contact form displays "This vehicle has been sold" message instead of form when vehicle status is "sold"</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR015 - Vehicle Detail Pages</section>
        <snippet>Users shall be able to view detailed vehicle pages with comprehensive information including photo galleries, specifications, history, service records, and current availability. This includes contact/inquiry functionality for interested buyers.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR016 - User Authentication</section>
        <snippet>Users shall be able to register for user accounts and authenticate using email/password or social login providers. Email service infrastructure established via Resend.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>ยง1.1 Technology Stack - Email Service</section>
        <snippet>Resend 4.0.1: Transactional emails (verification, password reset), React Email template support, free tier 100/day, modern DX. Already configured from Story 5.1.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>ยง1.1 Technology Stack - Forms</section>
        <snippet>React Hook Form 7.54.0: Uncontrolled form performance, validation, minimal re-renders, user-friendly for complex forms (vehicle inquiry, auth).</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Stories</title>
        <section>Epic 3: Vehicle Inventory Integration</section>
        <snippet>Story 3.4 establishes vehicle detail pages with "Contact Us" / "Inquire" button. Story 3.7 replaces simple link with full inline contact form with email delivery.</snippet>
      </doc>
      <doc>
        <path>docs/tech-specs/epic-3-vehicle-inventory-tech-spec.md</path>
        <title>Epic 3 Technical Specification</title>
        <section>Story 3.4: Vehicle Detail Page</section>
        <snippet>Vehicle detail page accessible at /vehicles/[slug] with comprehensive information and "Contact Us" / "Inquire" button for interested buyers.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-5.1.md</path>
        <title>Story 5.1: User Authentication with NextAuth.js</title>
        <section>Email Service Foundation</section>
        <snippet>Resend email service configured with RESEND_API_KEY. lib/auth/email.ts has Resend client initialization and email verification templates as reference patterns.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-5.3.md</path>
        <title>Story 5.3: User Profile &amp; Account Settings</title>
        <section>Form Patterns</section>
        <snippet>React Hook Form patterns with Zod validation, API route structure with validation, comprehensive error handling. Reusable patterns for contact form implementation.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>lib/auth/email.ts</path>
        <kind>service</kind>
        <symbol>sendVerificationEmail, sendPasswordResetEmail</symbol>
        <lines>1-91</lines>
        <reason>Resend email service foundation. Shows pattern for Resend client initialization (line 6), email sending with error handling (lines 29-34, 70-75), and React Email template rendering (lines 22-27). Reusable pattern for vehicle inquiry email sending.</reason>
      </artifact>
      <artifact>
        <path>components/shared/ContactInquiry.tsx</path>
        <kind>component</kind>
        <symbol>ContactInquiry</symbol>
        <lines>1-35</lines>
        <reason>Current contact component on vehicle detail pages (Story 3.4). Simple link-based approach to be replaced by full inline contact form. Shows sold vehicle handling pattern (lines 15-20) to be preserved.</reason>
      </artifact>
      <artifact>
        <path>app/vehicles/[slug]/page.tsx</path>
        <kind>page</kind>
        <symbol>VehicleDetailPage</symbol>
        <lines>12, 140-160 (estimated)</lines>
        <reason>Vehicle detail page where ContactInquiry component is currently integrated (line 12). Integration point for new VehicleContactForm component. ISR configuration (line 22) and vehicle data fetching patterns to pass to form.</reason>
      </artifact>
      <artifact>
        <path>components/account/ProfileForm.tsx</path>
        <kind>component</kind>
        <symbol>ProfileForm</symbol>
        <lines>1-80</lines>
        <reason>React Hook Form pattern with Zod validation (lines 28-40), form submission with loading states (lines 68-80), error handling with toast notifications (lines 46-49). Reference pattern for VehicleContactForm implementation.</reason>
      </artifact>
      <artifact>
        <path>app/api/user/profile/route.ts</path>
        <kind>api-route</kind>
        <symbol>PATCH</symbol>
        <lines>1-60</lines>
        <reason>API route structure with authentication check (lines 14-17), request body validation with Zod (lines 20-30), error handling with appropriate status codes (lines 24-30, 58-60). Pattern for contact form API route.</reason>
      </artifact>
      <artifact>
        <path>lib/profile/types.ts</path>
        <kind>types</kind>
        <symbol>profileUpdateSchema, addressSchema</symbol>
        <lines>1-91</lines>
        <reason>Zod validation schema patterns (lines 17-24, 46-58) showing field validation rules (min/max length, regex, required/optional). Reference for VehicleInquiryFormData schema with email, phone, message validation.</reason>
      </artifact>
      <artifact>
        <path>components/ui/input.tsx</path>
        <kind>component</kind>
        <symbol>Input</symbol>
        <lines>N/A</lines>
        <reason>ShadCN Input component for text fields (First Name, Last Name, Email, Phone). Already installed and used in ProfileForm.</reason>
      </artifact>
      <artifact>
        <path>components/ui/textarea.tsx</path>
        <kind>component</kind>
        <symbol>Textarea</symbol>
        <lines>N/A</lines>
        <reason>ShadCN Textarea component for message field with character counter. Already installed.</reason>
      </artifact>
      <artifact>
        <path>components/ui/checkbox.tsx</path>
        <kind>component</kind>
        <symbol>Checkbox</symbol>
        <lines>N/A</lines>
        <reason>ShadCN Checkbox component for trade-in and price drop alert checkboxes. Already installed.</reason>
      </artifact>
      <artifact>
        <path>components/ui/button.tsx</path>
        <kind>component</kind>
        <symbol>Button</symbol>
        <lines>N/A</lines>
        <reason>ShadCN Button component for form submit button with loading states. Already installed.</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package>react-hook-form</package>
        <version>^7.54.0</version>
        <purpose>Form state management, validation, and submission handling</purpose>
        <status>Already installed</status>
      </node>
      <node>
        <package>@hookform/resolvers</package>
        <version>^3.3.4</version>
        <purpose>Zod resolver for React Hook Form validation integration</purpose>
        <status>Already installed</status>
      </node>
      <node>
        <package>zod</package>
        <version>^3.22.4</version>
        <purpose>Schema validation for form fields and API requests</purpose>
        <status>Already installed</status>
      </node>
      <node>
        <package>resend</package>
        <version>4.0.1</version>
        <purpose>Email delivery service for sending inquiry emails to sales team</purpose>
        <status>Already installed (Story 5.1)</status>
      </node>
      <node>
        <package>@react-email/components</package>
        <version>Latest</version>
        <purpose>Email template rendering with React components</purpose>
        <status>Already installed (Story 5.1)</status>
      </node>
      <node>
        <package>sonner</package>
        <version>Latest</version>
        <purpose>Toast notifications for success/error messages</purpose>
        <status>Already installed</status>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint category="architecture">
      <rule>Use App Router patterns (Server Components for data fetching, Client Components for interactivity)</rule>
      <source>solution-architecture.md ยง2.1</source>
    </constraint>
    <constraint category="architecture">
      <rule>Create VehicleContactForm as Client Component ("use client" directive) for form interactivity</rule>
      <source>solution-architecture.md ยง2.4</source>
    </constraint>
    <constraint category="forms">
      <rule>Use React Hook Form (7.54.0) with Zod validation for all complex forms</rule>
      <source>solution-architecture.md ยง1.1, Story 5.3 pattern</source>
    </constraint>
    <constraint category="forms">
      <rule>Implement uncontrolled form inputs to minimize re-renders and improve performance</rule>
      <source>solution-architecture.md ยง1.1</source>
    </constraint>
    <constraint category="validation">
      <rule>Define Zod schema with field validation rules: firstName/lastName (min 2, max 50 chars), email (valid format), phone (optional, 10-15 digits), message (min 10, max 1000 chars), hasTradein/subscribeToPriceDrops (boolean)</rule>
      <source>Story 3.7 Task 4, lib/profile/types.ts pattern</source>
    </constraint>
    <constraint category="validation">
      <rule>Display inline error messages below each field with red text, prevent submission until validation passes</rule>
      <source>Story 3.7 AC6, ProfileForm pattern</source>
    </constraint>
    <constraint category="email">
      <rule>Use existing Resend client from lib/auth/email.ts pattern. Resend API key already configured (RESEND_API_KEY)</rule>
      <source>Story 5.1 foundation, lib/auth/email.ts</source>
    </constraint>
    <constraint category="email">
      <rule>Send email to sales team using environment variable SALES_EMAIL (to be added). Include sender email as reply-to for easy response</rule>
      <source>Story 3.7 AC5, Task 7</source>
    </constraint>
    <constraint category="email">
      <rule>Construct email HTML template with vehicle details (image thumbnail, year/make/model, price, VIN, mileage) and inquiry details (name, email, phone, message, trade-in interest, price drop subscription)</rule>
      <source>Story 3.7 Task 3, Dev Notes email template design</source>
    </constraint>
    <constraint category="rate-limiting">
      <rule>Implement in-memory rate limiting (10 requests per hour per IP) in API route to prevent spam</rule>
      <source>Story 3.7 Task 2, Dev Notes</source>
    </constraint>
    <constraint category="spam-prevention">
      <rule>Add honeypot field (hidden) for bot detection and spam prevention</rule>
      <source>Story 3.7 Task 10</source>
    </constraint>
    <constraint category="ui-components">
      <rule>Use ShadCN UI components: Input (text fields), Textarea (message), Checkbox (trade-in, price drops), Button (submit), useToast (notifications)</rule>
      <source>Story 3.7 Dev Notes, solution-architecture.md ยง1.1</source>
    </constraint>
    <constraint category="layout">
      <rule>Two-column grid layout for name fields (First Name | Last Name on desktop), two-column for contact fields (Email | Phone on desktop)</rule>
      <source>Story 3.7 Task 1</source>
    </constraint>
    <constraint category="layout">
      <rule>Style form header "MESSAGE SELLER" with bold uppercase text, gray background matching screenshot design</rule>
      <source>Story 3.7 Task 1, Dev Notes</source>
    </constraint>
    <constraint category="auto-fill">
      <rule>Auto-fill message textarea with vehicle-specific inquiry text: "I'm interested and want to know more about the {year} {make} {model} you have listed for ${price} on {source}."</rule>
      <source>Story 3.7 AC2, Task 1</source>
    </constraint>
    <constraint category="character-limit">
      <rule>Add character counter to message textarea (118 / 1000 format matching screenshot)</rule>
      <source>Story 3.7 Task 1</source>
    </constraint>
    <constraint category="sold-vehicles">
      <rule>Conditionally render: show VehicleContactForm for "current" vehicles, show "This vehicle has been sold" message with SOLD badge for "sold" vehicles</rule>
      <source>Story 3.7 AC8, Task 6, ContactInquiry pattern</source>
    </constraint>
    <constraint category="integration">
      <rule>Replace ContactInquiry component in app/vehicles/[slug]/page.tsx with VehicleContactForm. Pass vehicle data props: {slug, title, year, make, model, price, status}</rule>
      <source>Story 3.7 Task 6</source>
    </constraint>
    <constraint category="positioning">
      <rule>Position form in sidebar below pricing card (matching Story 3.4 layout). Ensure form is sticky on desktop (consistent with sidebar behavior)</rule>
      <source>Story 3.7 Task 6</source>
    </constraint>
    <constraint category="api-structure">
      <rule>Create POST endpoint at /api/contact/vehicle. Accept JSON payload: {vehicleSlug, firstName, lastName, email, phone, message, hasTradein, subscribeToPriceDrops}. Return 200 with {success: true, messageId} or 400/500 with error messages</rule>
      <source>Story 3.7 Task 2, app/api/user/profile/route.ts pattern</source>
    </constraint>
    <constraint category="typescript">
      <rule>Create types/contact.ts with interfaces: VehicleInquiryFormData (form fields), VehicleInquiryEmailPayload (API payload), VehicleInquiryResponse (API response)</rule>
      <source>Story 3.7 Task 8, lib/profile/types.ts pattern</source>
    </constraint>
    <constraint category="accessibility">
      <rule>Add proper ARIA labels for all form fields, ensure keyboard navigation works (tab order, enter to submit), 44x44px minimum touch targets (WCAG AA), test screen reader compatibility</rule>
      <source>Story 3.7 Task 10, solution-architecture.md NFR002</source>
    </constraint>
    <constraint category="testing">
      <rule>Write unit tests with Vitest for form component and validation. Integration tests for API route with mocked Resend client. E2E tests with Playwright for full inquiry submission flow</rule>
      <source>Story 3.7 Task 9, solution-architecture.md ยง1.1</source>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>VehicleInquiryFormData</name>
      <kind>TypeScript Interface</kind>
      <signature>
        interface VehicleInquiryFormData {
          firstName: string;
          lastName: string;
          email: string;
          phone?: string;
          message: string;
          hasTradein: boolean;
          subscribeToPriceDrops: boolean;
        }
      </signature>
      <path>types/contact.ts (to be created)</path>
    </interface>
    <interface>
      <name>VehicleInquiryEmailPayload</name>
      <kind>TypeScript Interface</kind>
      <signature>
        interface VehicleInquiryEmailPayload extends VehicleInquiryFormData {
          vehicleSlug: string;
          vehicleTitle: string;
          vehicleYear: number;
          vehicleMake: string;
          vehicleModel: string;
          vehiclePrice: number;
          vehicleVIN?: string;
          vehicleMileage: number;
          vehicleImageUrl?: string;
        }
      </signature>
      <path>types/contact.ts (to be created)</path>
    </interface>
    <interface>
      <name>VehicleInquiryResponse</name>
      <kind>TypeScript Interface</kind>
      <signature>
        interface VehicleInquiryResponse {
          success: boolean;
          messageId?: string;
          error?: string;
        }
      </signature>
      <path>types/contact.ts (to be created)</path>
    </interface>
    <interface>
      <name>POST /api/contact/vehicle</name>
      <kind>API Endpoint</kind>
      <signature>
        POST /api/contact/vehicle
        Request Body: VehicleInquiryEmailPayload (JSON)
        Response: VehicleInquiryResponse (200/400/500)
        Rate Limit: 10 requests per hour per IP
      </signature>
      <path>app/api/contact/vehicle/route.ts (to be created)</path>
    </interface>
    <interface>
      <name>VehicleContactForm Component</name>
      <kind>React Client Component</kind>
      <signature>
        interface VehicleContactFormProps {
          vehicleSlug: string;
          vehicleTitle: string;
          vehicleYear: number;
          vehicleMake: string;
          vehicleModel: string;
          vehiclePrice: number;
          vehicleStatus: "current" | "sold";
          vehicleVIN?: string;
          vehicleMileage: number;
          vehicleImageUrl?: string;
        }
        function VehicleContactForm(props: VehicleContactFormProps): JSX.Element
      </signature>
      <path>components/vehicles/VehicleContactForm.tsx (to be created)</path>
    </interface>
    <interface>
      <name>Resend Client API</name>
      <kind>External Service</kind>
      <signature>
        const resend = new Resend(process.env.RESEND_API_KEY);
        await resend.emails.send({ from, to, subject, html, reply_to })
      </signature>
      <path>lib/auth/email.ts (existing pattern)</path>
    </interface>
    <interface>
      <name>React Hook Form + Zod Pattern</name>
      <kind>Library Integration</kind>
      <signature>
        const { register, handleSubmit, formState: { errors } } = useForm&lt;VehicleInquiryFormData&gt;({
          resolver: zodResolver(vehicleInquirySchema),
          defaultValues: { message: autoFilledMessage }
        });
      </signature>
      <path>components/account/ProfileForm.tsx (existing pattern)</path>
    </interface>
    <interface>
      <name>ShadCN UI Components</name>
      <kind>Component Library</kind>
      <signature>
        - Input: &lt;Input type="text" {...register("firstName")} /&gt;
        - Textarea: &lt;Textarea {...register("message")} /&gt;
        - Checkbox: &lt;Checkbox {...register("hasTradein")} /&gt;
        - Button: &lt;Button type="submit" disabled={isLoading}&gt;
        - useToast: const { toast } = useToast(); toast({ title, description })
      </signature>
      <path>components/ui/* (existing)</path>
    </interface>
  </interfaces>
  <tests>
    <standards>
Testing framework: Vitest for unit tests, Playwright for E2E tests (solution-architecture.md ยง1.1). Target coverage: 80%+ for new code. Test patterns follow existing test suites from Story 5.1-5.3 (auth tests, profile tests). Unit tests focus on component rendering, validation logic, and form submission behavior. Integration tests verify API route validation and email sending with mocked Resend client. E2E tests validate full user flows from vehicle page to successful submission. Accessibility testing with axe-core for WCAG AA compliance (form labels, keyboard navigation, screen reader compatibility).
    </standards>
    <locations>
      <location>__tests__/components/vehicles/VehicleContactForm.test.tsx</location>
      <location>__tests__/api/contact/vehicle.test.ts</location>
      <location>__tests__/e2e/vehicle-contact-form.spec.ts</location>
    </locations>
    <ideas>
      <test-group ac="AC1" name="Contact Form Component Rendering">
        <idea>Unit test: VehicleContactForm renders all required fields (First Name, Last Name, Email, Phone optional, Message)</idea>
        <idea>Unit test: Form header displays "MESSAGE SELLER" in bold uppercase</idea>
        <idea>Unit test: Form displays with gray background matching design</idea>
        <idea>Unit test: Two-column grid layout renders correctly on desktop (name fields, contact fields)</idea>
        <idea>Unit test: Form fields stack vertically on mobile (responsive)</idea>
        <idea>Unit test: Privacy policy disclaimer text displays at bottom</idea>
      </test-group>
      <test-group ac="AC2" name="Auto-Filled Message">
        <idea>Unit test: Message textarea pre-populates with vehicle-specific text including year, make, model, price</idea>
        <idea>Unit test: Auto-fill message includes correct vehicle title and listing source</idea>
        <idea>Unit test: Auto-fill works correctly with "Call for Price" vehicles (no price in message)</idea>
        <idea>Unit test: User can edit auto-filled message text</idea>
      </test-group>
      <test-group ac="AC3" name="Trade-In Option">
        <idea>Unit test: "Do you have a trade-in?" checkbox renders with proper label</idea>
        <idea>Unit test: Trade-in checkbox is unchecked by default</idea>
        <idea>Unit test: Trade-in checkbox can be toggled on/off</idea>
        <idea>Unit test: Trade-in value included in form submission payload</idea>
      </test-group>
      <test-group ac="AC4" name="Price Drop Alerts">
        <idea>Unit test: "Email me price drops for this vehicle" checkbox renders with proper label</idea>
        <idea>Unit test: Price drop checkbox is pre-checked by default (matching screenshot)</idea>
        <idea>Unit test: Price drop checkbox can be toggled on/off</idea>
        <idea>Unit test: Price drop subscription value included in form submission payload</idea>
      </test-group>
      <test-group ac="AC5" name="Email Delivery">
        <idea>Integration test: API route sends email via Resend with correct payload (vehicle details, inquiry data)</idea>
        <idea>Integration test: Email includes vehicle image thumbnail (first gallery image)</idea>
        <idea>Integration test: Email displays vehicle details (Year, Make, Model, Price, VIN, Mileage)</idea>
        <idea>Integration test: Email displays inquiry details (Name, Email, Phone, Message)</idea>
        <idea>Integration test: Email includes trade-in interest (Yes/No)</idea>
        <idea>Integration test: Email includes price drop subscription (Yes/No)</idea>
        <idea>Integration test: Email includes "View Vehicle Listing" CTA button with correct link</idea>
        <idea>Integration test: Email sender address set as reply-to for easy response</idea>
        <idea>Integration test: Email sent to SALES_EMAIL environment variable address</idea>
        <idea>Integration test: Resend API error handled gracefully (returns 500 with error message)</idea>
      </test-group>
      <test-group ac="AC6" name="Validation &amp; Error Handling">
        <idea>Unit test: firstName validation - required, min 2 chars, max 50 chars</idea>
        <idea>Unit test: lastName validation - required, min 2 chars, max 50 chars</idea>
        <idea>Unit test: email validation - required, valid email format</idea>
        <idea>Unit test: phone validation - optional, valid phone format (10-15 digits)</idea>
        <idea>Unit test: message validation - required, min 10 chars, max 1000 chars</idea>
        <idea>Unit test: Inline error messages display below each field with red text</idea>
        <idea>Unit test: Form submission prevented until all validation passes</idea>
        <idea>Unit test: Email format validated on blur event</idea>
        <idea>Unit test: Error toast notification shown if API request fails</idea>
        <idea>Unit test: Network errors handled gracefully with retry option</idea>
        <idea>Integration test: API route validates request body with Zod schema</idea>
        <idea>Integration test: API route returns 400 with validation errors for invalid payload</idea>
      </test-group>
      <test-group ac="AC7" name="Success Confirmation">
        <idea>Unit test: Success toast notification displays "Message sent! We'll be in touch soon."</idea>
        <idea>Unit test: Form fields cleared after successful submission (optional behavior)</idea>
        <idea>Unit test: Form submit button disabled for 60 seconds after successful submission</idea>
        <idea>Unit test: "Send Another Message" button displayed after success to reset form</idea>
        <idea>Unit test: Loading state during submission (disabled inputs, loading spinner on button)</idea>
        <idea>Integration test: API route returns 200 with {success: true, messageId} on success</idea>
      </test-group>
      <test-group ac="AC8" name="Sold Vehicle Handling">
        <idea>Unit test: Contact form hidden when vehicleStatus is "sold"</idea>
        <idea>Unit test: "This vehicle has been sold" message displayed for sold vehicles</idea>
        <idea>Unit test: SOLD badge displayed with sold message</idea>
        <idea>E2E test: Sold vehicles show disabled message instead of form on vehicle detail page</idea>
      </test-group>
      <test-group name="API Route Tests">
        <idea>Integration test: API route accepts POST requests to /api/contact/vehicle</idea>
        <idea>Integration test: API route fetches vehicle details from Sanity using vehicleSlug</idea>
        <idea>Integration test: API route constructs email HTML template correctly</idea>
        <idea>Integration test: API route returns 400 for missing required fields</idea>
        <idea>Integration test: API route returns 500 for Sanity fetch errors</idea>
        <idea>Integration test: Rate limiting enforced (10 requests per hour per IP)</idea>
        <idea>Integration test: Rate limit exceeded returns 429 with retry-after header</idea>
      </test-group>
      <test-group name="Form Submission Flow">
        <idea>E2E test: User can navigate to vehicle detail page and see contact form</idea>
        <idea>E2E test: User can fill out all form fields and submit inquiry</idea>
        <idea>E2E test: Successful submission shows confirmation toast and clears form</idea>
        <idea>E2E test: Form validation errors prevent submission and display inline messages</idea>
        <idea>E2E test: Form submission disabled during loading state</idea>
      </test-group>
      <test-group name="Character Counter">
        <idea>Unit test: Message textarea displays character counter (0 / 1000 format initially)</idea>
        <idea>Unit test: Character counter updates as user types (e.g., 118 / 1000)</idea>
        <idea>Unit test: Character counter turns red when approaching limit (e.g., &gt;950 chars)</idea>
        <idea>Unit test: Form prevents submission when message exceeds 1000 characters</idea>
      </test-group>
      <test-group name="Spam Prevention">
        <idea>Unit test: Honeypot field rendered as hidden input</idea>
        <idea>Integration test: API route rejects submissions with filled honeypot field (bot detected)</idea>
        <idea>Integration test: Rate limiting prevents spam from single IP address</idea>
      </test-group>
      <test-group name="Accessibility">
        <idea>Unit test: All form fields have proper ARIA labels</idea>
        <idea>Unit test: Keyboard navigation works correctly (tab order, enter to submit)</idea>
        <idea>Unit test: Focus states visible for all inputs and buttons</idea>
        <idea>Unit test: Touch targets meet 44x44px minimum (WCAG AA)</idea>
        <idea>Unit test: Screen reader announces form errors correctly (aria-live)</idea>
        <idea>Unit test: Loading spinner includes aria-live announcement during submission</idea>
        <idea>E2E test: Form navigable entirely with keyboard (no mouse required)</idea>
        <idea>Accessibility test: Color contrast meets WCAG AA for text and error messages (axe-core)</idea>
      </test-group>
      <test-group name="TypeScript Types">
        <idea>Type test: VehicleInquiryFormData interface matches Zod schema</idea>
        <idea>Type test: VehicleInquiryEmailPayload extends VehicleInquiryFormData correctly</idea>
        <idea>Type test: VehicleInquiryResponse interface used in API route</idea>
        <idea>Type test: VehicleContactFormProps interface enforces required props</idea>
      </test-group>
      <test-group name="Email Template">
        <idea>Integration test: Email template renders correctly in HTML format</idea>
        <idea>Integration test: Vehicle image thumbnail displays with correct URL</idea>
        <idea>Integration test: Email renders correctly in Gmail, Outlook, Apple Mail (manual testing)</idea>
        <idea>Integration test: Email includes timestamp and source tracking in footer</idea>
      </test-group>
    </ideas>
  </tests>
</story-context>
