<story-context id="bmad/bmm/workflows/4-implementation/story-context/story-8.1" v="1.0">
  <metadata>
    <epicId>8</epicId>
    <storyId>1</storyId>
    <title>Sanity CMS Schema for Events</title>
    <status>Ready</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/heggiedesign/Development/enthusiastauto-1/docs/stories/story-8.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>content editor</asA>
    <iWant>a comprehensive Sanity CMS schema for managing event listings</iWant>
    <soThat>I can create, manage, and publish events with status tracking, photo galleries, and all necessary metadata</soThat>
    <tasks>
      <task id="1" status="pending">
        <title>Create Event Schema File</title>
        <description>Create sanity/schemas/event.ts file following vehicle schema pattern with all required fields</description>
        <acceptanceCriteria>1, 2, 3, 4, 5, 6, 7</acceptanceCriteria>
        <subtasks>
          <subtask>Create sanity/schemas/event.ts file following vehicle schema pattern</subtask>
          <subtask>Define document type with name 'event' and title 'Event'</subtask>
          <subtask>Add title field (string, required)</subtask>
          <subtask>Add slug field (slug type, auto-generate from title, required)</subtask>
          <subtask>Add eventDate field (datetime type, required with future/past validation)</subtask>
          <subtask>Add location object field with venue name (string) and address (text)</subtask>
          <subtask>Add status field (string, options: upcoming/recap/past, required, default: upcoming)</subtask>
          <subtask>Add heroImage field (image type with hotspot, required)</subtask>
          <subtask>Add images array field (image array, 1-20 images, optional captions)</subtask>
          <subtask>Add description field (portable text/block content for rich formatting)</subtask>
          <subtask>Add externalUrl field (url type, optional, for external event websites)</subtask>
          <subtask>Add SEO metadata fields: metaTitle (string), metaDescription (text), ogImage (image)</subtask>
        </subtasks>
      </task>
      <task id="2" status="pending">
        <title>Implement Field Validation Rules</title>
        <description>Add validation rules to ensure required fields and data quality</description>
        <acceptanceCriteria>9</acceptanceCriteria>
        <subtasks>
          <subtask>Add required validation to title field</subtask>
          <subtask>Add required validation to slug field with uniqueness check</subtask>
          <subtask>Add required validation to eventDate with date format validation</subtask>
          <subtask>Add required validation to status field</subtask>
          <subtask>Add required validation to heroImage field</subtask>
          <subtask>Add min(1) max(20) validation to images array</subtask>
          <subtask>Add URL format validation to externalUrl field</subtask>
          <subtask>Add character limits to metaTitle (60 chars) and metaDescription (160 chars)</subtask>
        </subtasks>
      </task>
      <task id="3" status="pending">
        <title>Configure Studio Preview</title>
        <description>Define preview select fields and implement prepare function for custom preview display</description>
        <acceptanceCriteria>8</acceptanceCriteria>
        <subtasks>
          <subtask>Define preview select fields: title, eventDate, status, heroImage</subtask>
          <subtask>Implement prepare function for custom preview display</subtask>
          <subtask>Add status badge emoji indicators (ðŸ”µ Upcoming, ðŸŸ¢ Recap, âšª Past)</subtask>
          <subtask>Format date display in subtitle (e.g., "ðŸ”µ Upcoming - March 15, 2025")</subtask>
          <subtask>Set heroImage as preview media thumbnail</subtask>
        </subtasks>
      </task>
      <task id="4" status="pending">
        <title>Register Schema in Sanity Config</title>
        <description>Import event schema in sanity/schemas/index.ts and add to schema types array</description>
        <acceptanceCriteria>10</acceptanceCriteria>
        <subtasks>
          <subtask>Import event schema in sanity/schemaTypes/index.ts</subtask>
          <subtask>Add event to schema types array</subtask>
          <subtask>Verify schema appears in Sanity Studio navigation</subtask>
          <subtask>Test schema with sanity schema extract command</subtask>
        </subtasks>
      </task>
      <task id="5" status="pending">
        <title>Configure Studio Desk Structure</title>
        <description>Add Events section to Sanity Studio desk structure with filtered views</description>
        <acceptanceCriteria>10</acceptanceCriteria>
        <subtasks>
          <subtask>Add Events section to Sanity Studio desk structure (sanity/structure.ts)</subtask>
          <subtask>Create filtered views: "Upcoming Events", "Past Events (Recaps)", "Archived Events"</subtask>
          <subtask>Configure default ordering by eventDate (descending)</subtask>
          <subtask>Add event count badges to filtered views</subtask>
        </subtasks>
      </task>
      <task id="6" status="pending">
        <title>Add Helper Fields for Calendar Export</title>
        <description>Add calendar-related fields for future .ics generation (Story 8.4)</description>
        <acceptanceCriteria>1</acceptanceCriteria>
        <subtasks>
          <subtask>Add startTime field (time string, optional, format: HH:MM)</subtask>
          <subtask>Add endTime field (time string, optional, format: HH:MM)</subtask>
          <subtask>Add timezone field (string, optional, default: "America/New_York")</subtask>
          <subtask>Add notes about future .ics generation requirements</subtask>
        </subtasks>
      </task>
      <task id="7" status="pending">
        <title>Create Sample Event for Testing</title>
        <description>Create sample event with all fields populated to verify schema functionality</description>
        <acceptanceCriteria>All</acceptanceCriteria>
        <subtasks>
          <subtask>Start Sanity Studio in development mode</subtask>
          <subtask>Create sample event with all fields populated</subtask>
          <subtask>Verify field validation rules work correctly</subtask>
          <subtask>Test status transitions (upcoming â†’ recap â†’ past)</subtask>
          <subtask>Upload test images to verify gallery functionality</subtask>
          <subtask>Verify preview renders correctly in Studio list view</subtask>
        </subtasks>
      </task>
      <task id="8" status="pending">
        <title>Update TypeScript Types</title>
        <description>Generate TypeScript types from Sanity schema for type safety</description>
        <acceptanceCriteria>10</acceptanceCriteria>
        <subtasks>
          <subtask>Run sanity schema extract to generate types</subtask>
          <subtask>Verify Event type appears in generated TypeScript definitions</subtask>
          <subtask>Add Event type exports to types barrel file if needed</subtask>
          <subtask>Document Event type structure for future stories</subtask>
        </subtasks>
      </task>
      <task id="9" status="pending">
        <title>Documentation</title>
        <description>Document event schema fields and editor guidelines</description>
        <acceptanceCriteria>All</acceptanceCriteria>
        <subtasks>
          <subtask>Document event schema fields in README or inline comments</subtask>
          <subtask>Add editor guidelines for status management workflow</subtask>
          <subtask>Document image requirements (dimensions, file size, format)</subtask>
          <subtask>Create quick reference guide for content editors</subtask>
        </subtasks>
      </task>
      <task id="10" status="pending">
        <title>Testing and Validation</title>
        <description>Comprehensive testing of schema validation rules and Studio functionality</description>
        <acceptanceCriteria>All</acceptanceCriteria>
        <subtasks>
          <subtask>Unit test schema validation rules</subtask>
          <subtask>Test required field enforcement</subtask>
          <subtask>Test image upload and gallery functionality</subtask>
          <subtask>Test slug generation and uniqueness</subtask>
          <subtask>Test portable text formatting options</subtask>
          <subtask>Verify Studio preview display</subtask>
          <subtask>Test filtered views in desk structure</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1" priority="must-have">
      <title>Event Document Schema Created</title>
      <description>Sanity schema includes all required fields: title, slug, eventDate, location, status (upcoming/recap/past), hero image, photo gallery, description, external website link, and SEO metadata</description>
      <validation>
        - Schema file exists at sanity/schemas/event.ts
        - All required fields defined with correct types
        - Field descriptions provide editor guidance
        - Schema follows vehicle.ts pattern for consistency
      </validation>
    </criterion>
    <criterion id="2" priority="must-have">
      <title>Status Management</title>
      <description>Status field supports three states: "upcoming" (future events), "recap" (past events with photos/summary), and "past" (archived events)</description>
      <validation>
        - Status field is string type with radio layout
        - Three options defined: upcoming, recap, past
        - Default value set to "upcoming"
        - Field is required with validation
      </validation>
    </criterion>
    <criterion id="3" priority="must-have">
      <title>Date and Location Fields</title>
      <description>EventDate field with proper date validation, location field with venue name and address support</description>
      <validation>
        - eventDate is datetime type with required validation
        - location is object type with venue name (string) and address (text) sub-fields
        - Date format validation ensures proper datetime input
      </validation>
    </criterion>
    <criterion id="4" priority="must-have">
      <title>Photo Gallery Support</title>
      <description>Images array field supporting 1-20 high-quality event photos with captions and hotspot support for cropping</description>
      <validation>
        - images field is array of image type
        - Min 1, max 20 validation applied
        - Each image has optional caption field
        - Hotspot option enabled for focal point selection
      </validation>
    </criterion>
    <criterion id="5" priority="must-have">
      <title>Rich Text Description</title>
      <description>Description field using Sanity's portable text editor for rich content formatting</description>
      <validation>
        - description field uses array of block type
        - Supports basic formatting (bold, italic, lists, headings)
        - Portable text pattern matches vehicle schema
      </validation>
    </criterion>
    <criterion id="6" priority="must-have">
      <title>SEO Metadata Fields</title>
      <description>Meta title, meta description, and Open Graph image fields for social sharing optimization</description>
      <validation>
        - metaTitle string field with 60 character limit
        - metaDescription text field with 160 character limit
        - ogImage image field for social sharing
        - All SEO fields optional but recommended
      </validation>
    </criterion>
    <criterion id="7" priority="must-have">
      <title>External Links</title>
      <description>Optional external website URL field for linking to third-party event pages (Cars &amp; Bids, Bring a Trailer, etc.)</description>
      <validation>
        - externalUrl field is url type (optional)
        - URL format validation applied
        - Field description explains use case
      </validation>
    </criterion>
    <criterion id="8" priority="must-have">
      <title>Studio Preview Configuration</title>
      <description>Custom preview showing event title, date, status badge, and hero image in Sanity Studio list view</description>
      <validation>
        - preview.select defines: title, eventDate, status, heroImage
        - preview.prepare formats display with status emoji badges
        - Date formatted as "ðŸ”µ Upcoming - March 15, 2025"
        - Hero image appears as media thumbnail
      </validation>
    </criterion>
    <criterion id="9" priority="must-have">
      <title>Field Validation</title>
      <description>Validation rules ensure required fields (title, slug, eventDate, status, hero image) are completed before publishing</description>
      <validation>
        - title: required, 10-100 characters
        - slug: required, unique, auto-generated from title
        - eventDate: required, valid datetime
        - status: required
        - heroImage: required
        - images: min 1, max 20 (if provided)
        - externalUrl: valid URL format (if provided)
        - metaTitle: max 60 characters
        - metaDescription: max 160 characters
      </validation>
    </criterion>
    <criterion id="10" priority="must-have">
      <title>Schema Registration</title>
      <description>Event schema properly registered in Sanity config and appears in Studio navigation</description>
      <validation>
        - Schema imported in sanity/schemaTypes/index.ts
        - Event added to schema types array
        - Schema appears in Studio navigation
        - sanity schema extract generates Event TypeScript type
        - Desk structure includes Events section with filtered views
      </validation>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/docs/PRD.md</path>
        <relevance>Project requirements document - Epic 8 Events Management context (note: Epic 8 not yet added to PRD, story references lines 410-433 which don't exist yet)</relevance>
        <keyPoints>
          - Events Management epic planned for Phase 2/3
          - FR025-FR029 functional requirements for events (not yet defined in PRD)
          - Integration with existing Sanity CMS infrastructure
          - SEO optimization requirements apply to all content types
        </keyPoints>
      </doc>
      <doc>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/docs/epic-stories.md</path>
        <relevance>Epic breakdown - Epic 8 details (note: Epic 8 not yet defined in epic-stories.md)</relevance>
        <keyPoints>
          - Epic 3 (Vehicle Inventory Integration) provides Sanity CMS foundation (6 stories, 37 points)
          - Story 3.2 (Vehicle Schema) is the reference pattern for event schema
          - Sanity CMS proven with vehicle content management
          - Similar schema structure: document type, images, SEO, preview
        </keyPoints>
      </doc>
      <doc>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/docs/solution-architecture.md</path>
        <relevance>Technical architecture - Sanity CMS patterns, schema design, image handling</relevance>
        <keyPoints>
          - Sanity CMS v4 with TypeScript schemas using defineType and defineField
          - Image fields use hotspot for focal point selection
          - Portable text for rich content (vehicle schema reference)
          - Schema registration in sanity/schemaTypes/index.ts
          - ISR with webhook-driven revalidation pattern (60s + on-demand)
          - Sanity image CDN for bandwidth optimization
        </keyPoints>
      </doc>
      <doc>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/docs/stories/story-8.1.md</path>
        <relevance>Source story document with full requirements, tasks, and dev notes</relevance>
        <keyPoints>
          - 10 acceptance criteria covering schema, validation, preview, registration
          - 10 implementation tasks with 40+ subtasks
          - Status field design: upcoming/recap/past workflow
          - Calendar export fields (startTime, endTime, timezone) for Story 8.4
          - Reference to vehicle schema pattern (Story 3.2)
          - Image requirements: hero 1200x630px, gallery 1920x1080px
          - Studio desk structure with filtered views
        </keyPoints>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/sanity/schemas/vehicle.ts</path>
        <type>reference-pattern</type>
        <relevance>CRITICAL REFERENCE: Vehicle schema pattern to follow for event schema structure</relevance>
        <keyPatterns>
          - Uses defineType and defineField from Sanity v4
          - Document type with name, title, type fields
          - Field validation using Rule API (required, min, max, regex, etc.)
          - Image fields with hotspot option and alt text sub-fields
          - Array fields for image galleries with max validation
          - Portable text (block content) for rich descriptions
          - Preview configuration with select/prepare pattern
          - Status badge emoji in preview subtitle
          - Comprehensive field descriptions for editors
          - String fields with dropdown options for controlled values
        </keyPatterns>
      </artifact>
      <artifact>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/sanity/schemaTypes/index.ts</path>
        <type>modification-target</type>
        <relevance>Schema registration file - must import and register event schema here</relevance>
        <currentState>
          - Currently exports { types: [vehicle] }
          - Import pattern: import { vehicle } from "../schemas/vehicle"
          - Schema types array pattern for registration
        </currentState>
        <requiredChanges>
          - Import event schema: import { event } from "../schemas/event"
          - Add event to types array: types: [vehicle, event]
        </requiredChanges>
      </artifact>
      <artifact>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/sanity/structure.ts</path>
        <type>modification-target</type>
        <relevance>Studio desk structure configuration - add Events section with filtered views</relevance>
        <requiredChanges>
          - Add Events section to desk structure
          - Create filtered list views: Upcoming, Recaps, Archived
          - Configure default ordering by eventDate desc
          - Add document count badges to views
        </requiredChanges>
      </artifact>
      <artifact>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/package.json</path>
        <type>dependency-reference</type>
        <relevance>Dependency verification - confirm Sanity packages available</relevance>
        <existingDependencies>
          - sanity: 4
          - @sanity/client: ^7.12.0
          - @sanity/image-url: ^1.2.0
          - @sanity/vision: ^4.11.0
          - next-sanity: 11
          - @sanity/cli: ^4.11.0 (devDependency)
        </existingDependencies>
        <requiredDependencies>No new dependencies required - all Sanity packages present</requiredDependencies>
      </artifact>
      <artifact>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/sanity/lib/client.ts</path>
        <type>integration-reference</type>
        <relevance>Sanity client configuration for future event data fetching</relevance>
        <usage>Client configured for vehicle queries, will be reused for event queries in future stories</usage>
      </artifact>
      <artifact>
        <path>/Users/heggiedesign/Development/enthusiastauto-1/sanity/lib/image.ts</path>
        <type>utility-reference</type>
        <relevance>Image URL builder for event images (future stories)</relevance>
        <usage>urlFor() helper for generating Sanity image URLs with transformations</usage>
      </artifact>
    </code>
    <dependencies>
      <existing>
        <package>sanity</package>
        <version>4</version>
        <usage>Core Sanity CMS SDK, schema definition utilities (defineType, defineField)</usage>
      </existing>
      <existing>
        <package>@sanity/client</package>
        <version>^7.12.0</version>
        <usage>Sanity client for data fetching (used in future stories)</usage>
      </existing>
      <existing>
        <package>@sanity/vision</package>
        <version>^4.11.0</version>
        <usage>Sanity Studio query tool for testing GROQ queries</usage>
      </existing>
      <existing>
        <package>next-sanity</package>
        <version>11</version>
        <usage>Next.js integration helpers (used in future stories)</usage>
      </existing>
      <existing>
        <package>@sanity/cli</package>
        <version>^4.11.0</version>
        <usage>Sanity CLI for schema extraction (sanity schema extract)</usage>
      </existing>
    </dependencies>
  </artifacts>

  <constraints>
    <architectural>
      - Follow vehicle schema pattern from sanity/schemas/vehicle.ts exactly for consistency
      - Use defineType and defineField from Sanity v4 (NOT legacy export default object syntax)
      - Schema must be registered in sanity/schemaTypes/index.ts to appear in Studio
      - Desk structure configuration in sanity/structure.ts for filtered views
      - All schemas use TypeScript for type safety
      - Image fields must have hotspot option for focal point selection
      - Portable text (block content) for rich text fields (description)
      - Preview configuration required for Studio list view display
    </architectural>
    <sanityPatterns>
      - Document type with unique name (lowercase, singular: "event")
      - Title field for human-readable label (capitalized: "Event")
      - Slug field auto-generated from title field with maxLength: 200
      - Required fields must use .required() validation
      - String fields with limited options use dropdown layout
      - Image fields have sub-fields for alt text (SEO + accessibility)
      - Array fields for galleries use max() validation (1-20 images)
      - Validation messages use .error() method with clear guidance
      - Preview uses select object to define fields, prepare function to format
      - Field descriptions provide editor guidance and SEO tips
    </sanityPatterns>
    <statusFieldDesign>
      - Three status values: "upcoming" (future events), "recap" (past with content), "past" (archived)
      - Default value: "upcoming" for new events
      - Radio layout for clear single-choice UI
      - Status drives filtering in desk structure (Upcoming, Recaps, Archived views)
      - Status emoji in preview: ðŸ”µ Upcoming, ðŸŸ¢ Recap, âšª Past
    </statusFieldDesign>
    <imageRequirements>
      - Hero image: Required, minimum 1200x630px for social sharing (Open Graph)
      - Gallery images: Optional 1-20 images, recommended 1920x1080px
      - All images support hotspot for focal point selection
      - Alt text sub-field for accessibility and SEO
      - Optional caption sub-field for context
    </imageRequirements>
    <calendarExportFields>
      - startTime: optional time string (HH:MM format) for calendar export
      - endTime: optional time string (HH:MM format) for calendar export
      - timezone: optional string, default "America/New_York"
      - These fields support .ics generation in Story 8.4 (future)
      - Not displayed in initial UI, CMS-only for now
    </calendarExportFields>
    <seoMetadata>
      - metaTitle: max 60 characters (Google SERP limit)
      - metaDescription: max 160 characters (Google snippet limit)
      - ogImage: Open Graph image for social sharing (Facebook, Twitter)
      - All SEO fields optional but recommended for search visibility
      - Field descriptions explain SEO best practices
    </seoMetadata>
    <validationRules>
      - title: required, 10-100 characters (SEO + readability)
      - slug: required, unique, auto-generated from title
      - eventDate: required, valid datetime format
      - status: required, one of [upcoming, recap, past]
      - heroImage: required (document cannot publish without hero)
      - images: min 1, max 20 (if gallery provided)
      - externalUrl: valid URL format (if provided)
      - metaTitle: max 60 characters
      - metaDescription: max 160 characters
    </validationRules>
    <studioPreview>
      - Title: event title field
      - Subtitle: formatted as "{statusEmoji} {statusLabel} - {formattedDate}"
      - Media: heroImage thumbnail
      - Status emojis: ðŸ”µ Upcoming, ðŸŸ¢ Recap, âšª Past
      - Date formatted: "March 15, 2025" (human-readable)
    </studioPreview>
    <deskStructure>
      - Events section in main Studio navigation
      - Filtered views:
        1. "Upcoming Events" - status == "upcoming", order by eventDate asc
        2. "Past Events (Recaps)" - status == "recap", order by eventDate desc
        3. "Archived Events" - status == "past", order by eventDate desc
      - Document count badges on each view
      - Default ordering by eventDate (descending for past, ascending for upcoming)
    </deskStructure>
    <testing>
      - Create sample event in Studio with all fields populated
      - Verify validation prevents publishing without required fields
      - Test slug auto-generation and uniqueness
      - Upload test images to gallery (verify 1-20 limit)
      - Test status transitions (upcoming â†’ recap â†’ past)
      - Verify preview renders correctly with emoji badges and formatted date
      - Test filtered views show correct events by status
      - Run sanity schema extract to verify TypeScript type generation
    </testing>
  </constraints>

  <interfaces>
    <typeDefinitions>
      <interface name="EventSchema">
        <description>Sanity schema definition for event document type</description>
        <structure>
          {
            name: 'event',
            title: 'Event',
            type: 'document',
            fields: [
              { name: 'title', type: 'string', validation: required, 10-100 chars },
              { name: 'slug', type: 'slug', options: { source: 'title' } },
              { name: 'eventDate', type: 'datetime', validation: required },
              { name: 'location', type: 'object', fields: [venue: string, address: text] },
              { name: 'status', type: 'string', options: [upcoming, recap, past], default: 'upcoming' },
              { name: 'heroImage', type: 'image', options: { hotspot: true }, validation: required },
              { name: 'images', type: 'array', of: [image], validation: min(1) max(20) },
              { name: 'description', type: 'array', of: [block] },
              { name: 'externalUrl', type: 'url', optional },
              { name: 'metaTitle', type: 'string', max: 60 },
              { name: 'metaDescription', type: 'text', max: 160 },
              { name: 'ogImage', type: 'image' },
              { name: 'startTime', type: 'string', optional },
              { name: 'endTime', type: 'string', optional },
              { name: 'timezone', type: 'string', default: 'America/New_York' }
            ],
            preview: {
              select: { title, eventDate, status, media: heroImage },
              prepare: (format with status emoji and date)
            }
          }
        </structure>
      </interface>
      <interface name="EventPreview">
        <description>Studio preview display format</description>
        <format>
          title: event.title
          subtitle: "{emoji} {status} - {formatted date}"
          media: event.heroImage
        </format>
        <statusEmojis>
          upcoming: "ðŸ”µ"
          recap: "ðŸŸ¢"
          past: "âšª"
        </statusEmojis>
      </interface>
      <interface name="SchemaRegistration">
        <description>Schema registration in sanity/schemaTypes/index.ts</description>
        <pattern>
          import { event } from "../schemas/event";
          export const schema = {
            types: [vehicle, event]
          };
        </pattern>
      </interface>
      <interface name="DeskStructureConfig">
        <description>Studio desk structure configuration in sanity/structure.ts</description>
        <pattern>
          S.listItem()
            .title('Events')
            .child(
              S.list()
                .title('Events by Status')
                .items([
                  S.listItem().title('Upcoming Events').child(...),
                  S.listItem().title('Past Events (Recaps)').child(...),
                  S.listItem().title('Archived Events').child(...)
                ])
            )
        </pattern>
      </interface>
    </typeDefinitions>
    <existingPatterns>
      <pattern name="Vehicle Schema Reference">
        <file>/Users/heggiedesign/Development/enthusiastauto-1/sanity/schemas/vehicle.ts</file>
        <usage>Follow defineField patterns, validation syntax, preview structure, image field configuration, portable text setup</usage>
      </pattern>
      <pattern name="Schema Registration">
        <file>/Users/heggiedesign/Development/enthusiastauto-1/sanity/schemaTypes/index.ts</file>
        <usage>Import and register event schema following vehicle pattern</usage>
      </pattern>
      <pattern name="Desk Structure">
        <file>/Users/heggiedesign/Development/enthusiastauto-1/sanity/structure.ts</file>
        <usage>Add Events section with filtered views (if desk structure exists)</usage>
      </pattern>
    </existingPatterns>
  </interfaces>

  <tests>
    <standards>
      <standard>All required fields must enforce validation in Sanity Studio</standard>
      <standard>Sample event creation must succeed with all fields populated</standard>
      <standard>Schema validation must prevent publishing incomplete events</standard>
      <standard>Preview must render correctly with emoji badges and formatted dates</standard>
      <standard>Slug auto-generation must work from title field</standard>
      <standard>Image gallery must enforce 1-20 image limit</standard>
      <standard>Portable text description must support formatting (bold, italic, lists, headings)</standard>
      <standard>External URL field must validate URL format</standard>
      <standard>SEO metadata fields must enforce character limits (60/160)</standard>
      <standard>TypeScript types must generate via sanity schema extract</standard>
      <standard>Filtered desk views must show correct events by status</standard>
    </standards>
    <locations>
      <location type="schema-validation">sanity/schemas/event.ts - Field validation rules</location>
      <location type="studio-manual">Sanity Studio UI - Manual testing of event creation flow</location>
      <location type="cli">Command line - sanity schema extract for type generation</location>
      <location type="desk-structure">Sanity Studio - Filtered views in Events section</location>
    </locations>
    <ideas>
      <idea ac="1">Create event with all required fields, verify successful save</idea>
      <idea ac="1">Attempt to create event without required fields, verify validation error</idea>
      <idea ac="2">Create event with each status (upcoming, recap, past), verify status saves correctly</idea>
      <idea ac="2">Verify default status is "upcoming" for new events</idea>
      <idea ac="3">Create event with eventDate, verify datetime picker works</idea>
      <idea ac="3">Create event with location venue and address, verify object field structure</idea>
      <idea ac="4">Upload single image to gallery, verify accepts</idea>
      <idea ac="4">Upload 20 images to gallery, verify accepts</idea>
      <idea ac="4">Attempt to upload 21 images to gallery, verify validation error</idea>
      <idea ac="4">Verify image hotspot selector appears on image upload</idea>
      <idea ac="4">Add caption to gallery image, verify caption field works</idea>
      <idea ac="5">Create event with description using bold, italic, lists, headings</idea>
      <idea ac="5">Verify portable text editor toolbar appears for description field</idea>
      <idea ac="6">Enter metaTitle with 60 characters, verify accepts</idea>
      <idea ac="6">Enter metaTitle with 61 characters, verify validation warning</idea>
      <idea ac="6">Enter metaDescription with 160 characters, verify accepts</idea>
      <idea ac="6">Enter metaDescription with 161 characters, verify validation warning</idea>
      <idea ac="6">Upload ogImage, verify image field works</idea>
      <idea ac="7">Enter valid URL in externalUrl field, verify accepts</idea>
      <idea ac="7">Enter invalid URL in externalUrl field, verify validation error</idea>
      <idea ac="8">Create event, verify preview shows title correctly</idea>
      <idea ac="8">Create upcoming event, verify preview shows "ðŸ”µ Upcoming - {date}"</idea>
      <idea ac="8">Create recap event, verify preview shows "ðŸŸ¢ Recap - {date}"</idea>
      <idea ac="8">Create past event, verify preview shows "âšª Past - {date}"</idea>
      <idea ac="8">Verify heroImage appears as preview thumbnail</idea>
      <idea ac="9">Attempt to publish event without title, verify blocked</idea>
      <idea ac="9">Attempt to publish event without slug, verify blocked</idea>
      <idea ac="9">Attempt to publish event without eventDate, verify blocked</idea>
      <idea ac="9">Attempt to publish event without status, verify blocked</idea>
      <idea ac="9">Attempt to publish event without heroImage, verify blocked</idea>
      <idea ac="10">Verify event schema appears in Sanity Studio navigation after registration</idea>
      <idea ac="10">Run sanity schema extract, verify Event type generated in TypeScript definitions</idea>
      <idea ac="10">Navigate to Events section in Studio, verify filtered views appear (Upcoming, Recaps, Archived)</idea>
      <idea ac="10">Create upcoming event, verify appears in "Upcoming Events" view</idea>
      <idea ac="10">Create recap event, verify appears in "Past Events (Recaps)" view</idea>
      <idea ac="10">Create past event, verify appears in "Archived Events" view</idea>
      <idea ac="10">Verify event count badges appear on filtered views</idea>
    </ideas>
  </tests>
</story-context>
