<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.2</storyId>
    <title>Vehicle Schema & Data Models</title>
    <status>Ready</status>
    <generatedAt>2025-10-21</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-3.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a content editor</asA>
    <iWant>comprehensive vehicle schemas in Sanity Studio matching our existing Webflow structure</iWant>
    <soThat>I can migrate vehicle data and manage inventory in a structured way</soThat>
    <tasks>
      - Task 1: Create vehicle schema with basic information fields (listingTitle, slug, stockNumber, vin, chassis, mileage, bodyStyle, drive) - 9 subtasks
      - Task 2: Add color and pricing fields (exteriorColor, interiorColor, listingPrice, showCallForPrice, availabilityDate) - 5 subtasks
      - Task 3: Add status and visibility fields (inventoryStatus, statusTag, isLive, featuredVehicle, featuredInventory, sortOrder) - 6 subtasks
      - Task 4: Add engine and transmission fields (engineCodes, engineType, engineSize, transmission) - 4 subtasks
      - Task 5: Add image fields separated by category (signatureShot, soldShot, secondaryShot, 5 gallery arrays) - 9 subtasks
      - Task 6: Add content fields (listingThumbnailFeatures, highlights, overview, history) - 4 subtasks
      - Task 7: Add featured vehicle fields (featuredVehicleThumbnailText) - 1 subtask
      - Task 8: Add metadata and configure preview (createdAt, updatedAt, preview config) - 4 subtasks
      - Task 9: Update schema exports and test validation - 11 subtasks
    </tasks>
  </story>

  <acceptanceCriteria>
    - AC1: Vehicle schema includes all basic fields matching Webflow: listingTitle, slug, stockNumber, vin, chassis, mileage, bodyStyle, drive
    - AC2: Color and pricing fields: exteriorColor, interiorColor, listingPrice, showCallForPrice, availabilityDate
    - AC3: Status and visibility fields: inventoryStatus, statusTag, isLive, featuredVehicle, featuredInventory toggles
    - AC4: Engine and transmission fields: engineCodes, engineType, engineSize, transmission
    - AC5: Image fields separated by category: signatureShot, soldShot, secondaryShot, galleryExterior1/2/3, galleryInterior1/2 arrays
    - AC6: Content fields: listingThumbnailFeatures array, highlights rich text, overview rich text, history plain text
    - AC7: Business fields: sortOrder for manual ordering, featuredVehicleThumbnailText for carousel
    - AC8: All CarsForSale required fields properly marked: stockNumber, vin, colors, mileage, engine specs, transmission, price
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document - Phase 2 Expansion</title>
        <section>FR014 - Sanity CMS Integration</section>
        <snippet>The system shall integrate with Sanity CMS to retrieve and display vehicle inventory data including images, specifications, pricing, and availability status (current/sold)</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR006 - CMS Performance</section>
        <snippet>Content editors shall be able to publish new vehicle listings with rich media galleries and complete specifications in under 15 minutes using Sanity Studio</snippet>
      </doc>
      <doc>
        <path>docs/tech-specs/epic-3-vehicle-inventory-tech-spec.md</path>
        <title>Epic 3 Technical Specification</title>
        <section>Story 3.2 - Vehicle Schema Design (lines 250-636)</section>
        <snippet>Complete Sanity schema template with defineType/defineField API, 18 required fields including year/make/model/trim/VIN/mileage/price/status, specifications object, service history array, photo gallery (5-50 images with hotspot), rich text description, SEO fields, and validation rules</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>3.2 Data Models (lines 604-629)</section>
        <snippet>Entity relationship diagram showing Vehicle document in Sanity with model/year/status/images, integrated with User favorites system via Postgres. Schema includes preview configuration with title/year/status/media display</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Sanity Schema Example (lines 483-602)</section>
        <snippet>Reference vehicle schema showing slug generation from title, year validation (1900-2100), status options (current/sold), image array (1-30 with hotspot), specifications object with engine/transmission/drivetrain/colors/VIN, service history with date/description/mileage</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-3.2.md</path>
        <title>Story 3.2 - Webflow Migration Notes</title>
        <section>Dev Notes - Architecture Patterns</section>
        <snippet>Schema designed to match existing Webflow CMS structure exactly for seamless data migration. Includes separate image galleries by category (exterior1/2/3, interior1/2), hero image strategy (signatureShot/soldShot/secondaryShot), CarsForSale required fields, chassis/engine code dropdown options based on Webflow screenshots</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Stories Breakdown</title>
        <section>Story 3.2 - Vehicle Schema &amp; Data Models</section>
        <snippet>Define comprehensive vehicle schemas in Sanity Studio with 40+ fields matching Webflow structure: basic info, colors, pricing, status/visibility, engine specs, separated image galleries, content fields, CarsForSale integration markers. 8 points, blocks Stories 3.3-3.6</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>sanity/schemaTypes/index.ts</path>
        <kind>schema-registry</kind>
        <symbol>schema</symbol>
        <lines>1-5</lines>
        <reason>MUST UPDATE: Add vehicle schema to types array after creating vehicle.ts. Currently empty array - this is where new schema will be registered.</reason>
      </artifact>
      <artifact>
        <path>sanity/lib/client.ts</path>
        <kind>service</kind>
        <symbol>client, authenticatedClient</symbol>
        <lines>1-29</lines>
        <reason>Reference: Dual-client pattern already configured per Story 3.1. Read-only client with useCdn:false (ISR handles caching), authenticated client for webhook mutations. Will use client to query vehicles in future stories.</reason>
      </artifact>
      <artifact>
        <path>sanity.config.ts</path>
        <kind>config</kind>
        <symbol>defineConfig</symbol>
        <lines>1-40</lines>
        <reason>Reference: Sanity Studio config with deskTool plugin, basePath /studio, schema imported from schemaTypes/index.ts. Studio will automatically load new vehicle schema when added to registry.</reason>
      </artifact>
      <artifact>
        <path>docs/tech-specs/epic-3-vehicle-inventory-tech-spec.md</path>
        <kind>reference-implementation</kind>
        <symbol>vehicle schema template</symbol>
        <lines>265-561</lines>
        <reason>CRITICAL REFERENCE: Original tech spec schema with 18 fields (title/slug/year/make/model/trim/vin/mileage/price/status/specifications/features/images/description/serviceHistory/seo/createdAt/soldAt). Story 3.2 REVISES this to match Webflow structure with 40+ fields and different organization.</reason>
      </artifact>
      <artifact>
        <path>sanity/schemas/vehicle.ts</path>
        <kind>schema</kind>
        <symbol>vehicle schema</symbol>
        <lines>NEW FILE</lines>
        <reason>TO CREATE: Complete vehicle schema matching Webflow structure with listingTitle, slug, stockNumber, vin, chassis dropdown, mileage, bodyStyle, drive, colors, pricing, status/visibility toggles, engine/transmission fields, separated image galleries (signatureShot/soldShot/galleryExterior1-3/galleryInterior1-2), content fields (listingThumbnailFeatures array, highlights/overview rich text, history text), featuredVehicleThumbnailText, sortOrder, metadata, preview config. ~700 lines estimated.</reason>
      </artifact>
      <artifact>
        <path>sanity/env.ts</path>
        <kind>config</kind>
        <symbol>projectId, dataset, apiVersion</symbol>
        <lines>1-20</lines>
        <reason>Reference: Environment variables for Sanity connection already configured per Story 3.1 (projectId: n2usssau, dataset: production, apiVersion: 2025-01-21)</reason>
      </artifact>
      <artifact>
        <path>sanity/structure.ts</path>
        <kind>config</kind>
        <symbol>structure</symbol>
        <lines>1-20</lines>
        <reason>Reference: Desk structure configuration for Studio sidebar. May need update to organize vehicle documents if custom structure desired (default alphabetical is acceptable).</reason>
      </artifact>
    </code>
    <dependencies>
      <sanity>
        <package name="sanity" version="4" status="installed">Core Sanity Studio framework with defineType/defineField API</package>
        <package name="@sanity/client" version="^7.12.0" status="installed">Sanity client for GROQ queries (dual-client pattern configured)</package>
        <package name="@sanity/cli" version="^4.11.0" status="installed">Sanity CLI tools for Studio management</package>
        <package name="next-sanity" version="11" status="installed">Next.js integration with Sanity (live preview, ISR)</package>
        <package name="@sanity/image-url" version="^1.2.0" status="installed">Image URL builder for Sanity CDN optimization</package>
        <package name="@sanity/vision" version="^4.11.0" status="installed">GROQ query testing plugin for Studio</package>
      </sanity>
      <nextjs>
        <package name="next" version="15.3.0-canary.13" status="installed">Next.js 15 App Router framework</package>
        <package name="react" version="19.0.0" status="installed">React 19</package>
        <package name="react-dom" version="19.0.0" status="installed">React DOM 19</package>
      </nextjs>
      <typescript>
        <package name="typescript" version="5.8.2" status="installed">TypeScript for type-safe schema definitions</package>
        <package name="@types/node" version="22.13.10" status="installed">Node.js type definitions</package>
        <package name="@types/react" version="19.0.12" status="installed">React type definitions</package>
      </typescript>
      <ui>
        <package name="@radix-ui/react-accordion" version="^1.2.12" status="installed">Accordion component (potential use in Studio customization)</package>
        <package name="@radix-ui/react-dialog" version="^1.1.15" status="installed">Dialog component</package>
        <package name="@radix-ui/react-tooltip" version="^1.2.8" status="installed">Tooltip component</package>
        <package name="lucide-react" version="^0.545.0" status="installed">Icon library</package>
      </ui>
      <utilities>
        <package name="clsx" version="^2.1.1" status="installed">Class name utility</package>
        <package name="tailwind-merge" version="^3.3.1" status="installed">Tailwind class merging</package>
      </utilities>
    </dependencies>
  </artifacts>

  <constraints>
    - Sanity v4.x schema definition using defineType/defineField API (NOT v3 object syntax from tech spec)
    - Schema must match existing Webflow CMS structure EXACTLY for seamless data migration
    - Field names in camelCase (e.g., listingTitle not "Listing Title")
    - Separate image galleries required: signatureShot, soldShot, secondaryShot, galleryExterior1/2/3, galleryInterior1/2 (NOT single images array)
    - Hero image logic: inventoryStatus drives which shot displays (signatureShot for "Current Inventory", soldShot for "Sold")
    - CarsForSale required fields MUST be marked in descriptions: stockNumber, vin, exteriorColor, interiorColor, mileage, engineType, engineSize, transmission, listingPrice
    - VIN validation: exactly 17 characters, alphanumeric excluding I/O/Q per industry standard (/^[A-HJ-NPR-Z0-9]{17}$/)
    - Chassis dropdown options based on Webflow: E39, E46, E90, E92, F30, F80, G80, X3, X5 (extensible via Studio)
    - Engine code dropdown options based on Webflow: S62, S54, S65, N54, N55, B58, S58 (extensible via Studio)
    - Rich text fields use Sanity portable text (blocks array) with configured marks: highlights (normal/strong/emphasis only), overview (h2/h3/strong/emphasis/lists), featuredVehicleThumbnailText
    - Image hotspot enabled on ALL image fields for focal point selection
    - Alt text REQUIRED on all images for WCAG AA accessibility
    - Gallery image limits: 25 images max per gallery array (matches Webflow limits)
    - Boolean toggles: isLive (site visibility), featuredVehicle (inventory section), featuredInventory (carousel only), showCallForPrice (display logic)
    - availabilityDate: frontend filtering logic needed - if date in future, hide listing (Sanity stores, Next.js filters in GROQ)
    - Preview config MUST show: listingTitle, chassis, listingPrice, inventoryStatus, signatureShot image
    - Preview subtitle format: "$[price] - [status] - [chassis]" (e.g., "$74,990 - Current Inventory - E39")
    - TypeScript strict mode compliance required
    - Must deploy schema update by accessing /studio route (embedded Studio) or rebuilding Next.js app
  </constraints>
  <interfaces>
    <interface>
      <name>Sanity defineType API</name>
      <kind>Schema Definition</kind>
      <signature>defineType({ name: string, title: string, type: 'document', fields: defineField[], preview: PreviewConfig })</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity defineField API</name>
      <kind>Field Definition</kind>
      <signature>defineField({ name: string, title: string, type: FieldType, description?: string, validation?: Rule, options?: FieldOptions, initialValue?: any, readOnly?: boolean })</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity Field Types</name>
      <kind>Schema Types</kind>
      <signature>string | number | boolean | datetime | slug | image | array | object | text | 'block' (portable text)</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity Image Field with Hotspot</name>
      <kind>Image Field</kind>
      <signature>{ type: 'image', options: { hotspot: true }, fields?: [{ name: 'alt', type: 'string', validation: Rule => Rule.required() }] }</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity Array Field</name>
      <kind>Array Field</kind>
      <signature>{ type: 'array', of: [{ type: ItemType }], validation?: Rule => Rule.min(x).max(y), options?: { layout: 'tags' } }</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity Portable Text (Rich Text)</name>
      <kind>Block Content</kind>
      <signature>{ type: 'array', of: [{ type: 'block', styles: [{title, value}], marks: { decorators: [{title, value}] } }] }</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity Validation Rules</name>
      <kind>Validation API</kind>
      <signature>Rule.required() | Rule.min(n) | Rule.max(n) | Rule.length(n) | Rule.regex(pattern) | Rule.precision(n) | Rule.integer()</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Sanity Options</name>
      <kind>Field Options</kind>
      <signature>{ list: [{title, value}], layout: 'radio' | 'dropdown' | 'tags', source: 'fieldName' (for slug) }</signature>
      <path>sanity package</path>
    </interface>
    <interface>
      <name>Schema Registry Export</name>
      <kind>Schema Export</kind>
      <signature>export const schema: { types: SchemaTypeDefinition[] } = { types: [vehicle, ...] }</signature>
      <path>sanity/schemaTypes/index.ts</path>
    </interface>
  </interfaces>
  <tests>
    <standards>
Testing approach for Sanity schema implementation follows manual validation pattern since schema definitions are primarily configuration. Manual testing focuses on Studio UI behavior, field validation rules, and data entry workflows. Automated TypeScript build validation ensures type safety. Key testing areas:

1. **Manual Studio Validation**: Load /studio route, create test vehicle document, verify all fields render correctly with proper labels/descriptions/placeholders
2. **Validation Rule Testing**: Attempt invalid inputs (short VIN, negative mileage, missing required fields) to verify validation messages appear
3. **Image Upload Testing**: Upload images to all 8 gallery fields (signatureShot, soldShot, secondaryShot, galleryExterior1/2/3, galleryInterior1/2), verify 25-image limits enforced, test hotspot focal point selection
4. **Rich Text Editor Testing**: Format text in highlights (bullets/bold/italic), overview (headings/lists), featuredVehicleThumbnailText to verify portable text configuration
5. **Dropdown Testing**: Select values from chassis/engineCodes/inventoryStatus/statusTag dropdowns, verify radio layout for inventoryStatus
6. **Toggle Testing**: Toggle isLive/featuredVehicle/featuredInventory/showCallForPrice booleans, verify state persistence
7. **Preview Testing**: Verify document preview displays listingTitle, price, status, chassis, signatureShot image in correct format
8. **TypeScript Build Validation**: Run `pnpm build` to ensure schema compiles without errors and Studio generates successfully
9. **Test Data Matching**: Create complete test vehicle matching Webflow example (2003 BMW E39 M5, stock CF93682, VIN WBSDE93453CF93682) with all 40+ fields populated
10. **Schema Export Verification**: Confirm vehicle schema appears in Studio sidebar after updating schemaTypes/index.ts

Testing standards align with Story 3.1 patterns: manual Studio validation primary, TypeScript compilation secondary, no unit tests required for schema configuration.
    </standards>
    <locations>
      - sanity/schemas/vehicle.ts (new schema file to create)
      - sanity/schemaTypes/index.ts (schema registry to update)
      - http://localhost:3000/studio (embedded Studio for manual testing)
      - Terminal: pnpm dev (to access Studio)
      - Terminal: pnpm build (TypeScript validation)
    </locations>
    <ideas>
      <!-- Mapped to Acceptance Criteria -->

      <test ac="AC1" task="Task 1">
        <id>T1.1</id>
        <description>Create test vehicle document in Studio and verify all basic fields render: listingTitle (string 10-100 chars), slug (auto-generated), stockNumber (string), vin (17-char validation), chassis (dropdown with E39/E46/E90/F30/X3/X5 options), mileage (number >=0), bodyStyle (dropdown Sedan/Coupe/SUV/etc), drive (dropdown RWD/AWD/FWD)</description>
      </test>

      <test ac="AC1" task="Task 1">
        <id>T1.2</id>
        <description>Test VIN validation: attempt to save vehicle with 16-character VIN (should fail), 18-character VIN (should fail), VIN with letters I/O/Q (should fail), valid 17-char alphanumeric VIN like WBSDE93453CF93682 (should pass)</description>
      </test>

      <test ac="AC1" task="Task 1">
        <id>T1.3</id>
        <description>Test slug auto-generation: enter listingTitle "2003 BMW E39 M5 Jet Black", click Generate on slug field, verify slug becomes "2003-bmw-e39-m5-jet-black"</description>
      </test>

      <test ac="AC2" task="Task 2">
        <id>T2.1</id>
        <description>Verify color and pricing fields render correctly: exteriorColor (string), interiorColor (string), listingPrice (number with precision:2 for cents like $74990.00), showCallForPrice (boolean toggle default false), availabilityDate (datetime optional)</description>
      </test>

      <test ac="AC2" task="Task 2">
        <id>T2.2</id>
        <description>Test price validation: attempt negative price like -1000 (should fail), enter price with cents like 74990.50 (should pass and store with 2 decimal precision)</description>
      </test>

      <test ac="AC2" task="Task 2">
        <id>T2.3</id>
        <description>Test availabilityDate field: leave empty (should save successfully), set date to future (e.g., 2025-12-31), verify document saves (frontend filtering responsibility noted in Dev Notes)</description>
      </test>

      <test ac="AC3" task="Task 3">
        <id>T3.1</id>
        <description>Verify status/visibility fields: inventoryStatus dropdown with "Current Inventory"/"Sold" options in radio layout (default "Current Inventory"), statusTag dropdown with New Arrival/Reduced Price/Sold options (optional), isLive toggle (default true), featuredVehicle toggle (default false), featuredInventory toggle (default false), sortOrder number field</description>
      </test>

      <test ac="AC3" task="Task 3">
        <id>T3.2</id>
        <description>Test inventoryStatus radio layout: verify options display as radio buttons (not dropdown), select "Sold", save, reload document, verify "Sold" persists</description>
      </test>

      <test ac="AC3" task="Task 3">
        <id>T3.3</id>
        <description>Test toggle fields: set isLive to false, featuredVehicle to true, featuredInventory to true, save document, reload, verify all toggle states persist correctly</description>
      </test>

      <test ac="AC4" task="Task 4">
        <id>T4.1</id>
        <description>Verify engine/transmission fields: engineCodes dropdown with S62/S54/S65/N54/N55/B58/S58 options (required), engineType dropdown with Gasoline/Diesel/Electric/Hybrid (required, marked "Required for CarsForSale" in description), engineSize dropdown with "V8 Engine"/"I6 Engine"/"V10 Engine"/"I4 Engine" (required), transmission dropdown with Manual/Automatic/6-Speed Manual/7-Speed DCT/8-Speed Automatic options (required)</description>
      </test>

      <test ac="AC4" task="Task 4">
        <id>T4.2</id>
        <description>Test CarsForSale required field descriptions: verify engineType field description includes "Required for CarsForSale", same for engineSize and transmission fields</description>
      </test>

      <test ac="AC5" task="Task 5">
        <id>T5.1</id>
        <description>Verify image fields separated by category: signatureShot (single image, required, description "Hero & thumbnail image for vehicles with 'Current Inventory' status"), soldShot (single image, optional, description "Hero & thumbnail image for vehicles with 'Sold' status"), secondaryShot (single image, optional), galleryExterior1 (array max 25), galleryExterior2 (array max 25), galleryExterior3 (array max 25), galleryInterior1 (array max 25), galleryInterior2 (array max 25)</description>
      </test>

      <test ac="AC5" task="Task 5">
        <id>T5.2</id>
        <description>Test image upload to signatureShot: upload test image, verify hotspot tool appears for focal point selection, drag hotspot to focus on vehicle center, verify alt text field appears and requires input before saving</description>
      </test>

      <test ac="AC5" task="Task 5">
        <id>T5.3</id>
        <description>Test gallery array limits: upload 25 images to galleryExterior1, attempt to upload 26th image, verify validation prevents exceeding 25-image limit</description>
      </test>

      <test ac="AC5" task="Task 5">
        <id>T5.4</id>
        <description>Test alt text requirement: upload image to soldShot, leave alt text empty, attempt to save, verify validation error appears requiring alt text for accessibility</description>
      </test>

      <test ac="AC6" task="Task 6">
        <id>T6.1</id>
        <description>Verify content fields: listingThumbnailFeatures (array of strings with 'tags' layout for bullet points like "One-Owner Enthusiast Owned!"), highlights (portable text array with normal/strong/emphasis marks only), overview (portable text array with h2/h3 headings, strong, emphasis, lists), history (plain text field with rows:5, description "Text Only — This text is used in 'Featured Vehicle' thumbnail description")</description>
      </test>

      <test ac="AC6" task="Task 6">
        <id>T6.2</id>
        <description>Test listingThumbnailFeatures array: add 3 bullet points ("Extensive service history", "One-owner", "Low miles"), verify tags layout displays items as chips/badges, test add/remove functionality</description>
      </test>

      <test ac="AC6" task="Task 6">
        <id>T6.3</id>
        <description>Test highlights portable text: add bullet points with bold text, verify editor allows normal/strong/emphasis marks only (no headings), save and reload to verify formatting persists</description>
      </test>

      <test ac="AC6" task="Task 6">
        <id>T6.4</id>
        <description>Test overview portable text: add content with H2 heading "Exterior Condition", H3 subheading "Paint and Body", bulleted list, bold and italic text, verify all formatting options work, save and verify structure persists</description>
      </test>

      <test ac="AC7" task="Task 7">
        <id>T7.1</id>
        <description>Verify featuredVehicleThumbnailText field (portable text array, optional, description "Rich text for featured vehicle carousel description"), test formatting with normal/bold/italic, verify saves correctly</description>
      </test>

      <test ac="AC7" task="Task 8">
        <id>T7.2</id>
        <description>Test sortOrder field: enter number 10, save document, verify field stores numeric value for manual ordering of featured lists</description>
      </test>

      <test ac="AC8" task="Task 8">
        <id>T8.1</id>
        <description>Verify all CarsForSale required fields have descriptions marking them: stockNumber ("Last 7 of VIN - Required for CarsForSale"), vin ("Required for CarsForSale"), exteriorColor ("Required for CarsForSale"), interiorColor ("Required for CarsForSale"), mileage ("Required for CarsForSale"), engineType, engineSize, transmission, listingPrice ("Required for CarsForSale - USD price")</description>
      </test>

      <test ac="AC8" task="Task 9">
        <id>T8.2</id>
        <description>Test metadata fields: verify createdAt displays current timestamp (readOnly), updatedAt field exists (readOnly, auto-updated on save), save document, edit a field, save again, verify updatedAt timestamp changes</description>
      </test>

      <test ac="AC1-8" task="Task 8">
        <id>T8.3</id>
        <description>Test document preview: create vehicle with listingTitle "2003 BMW E39 M5", chassis "E39", listingPrice 74990, inventoryStatus "Current Inventory", upload signatureShot, verify preview shows title, subtitle "$74,990 - Current Inventory - E39", and thumbnail image in Studio sidebar</description>
      </test>

      <test ac="AC1-8" task="Task 9">
        <id>T9.1</id>
        <description>Test schema export: update sanity/schemaTypes/index.ts to add vehicle to types array, restart dev server with pnpm dev, access /studio route, verify "Vehicle" appears in Studio sidebar create menu</description>
      </test>

      <test ac="AC1-8" task="Task 9">
        <id>T9.2</id>
        <description>Create complete test vehicle matching Webflow example: listingTitle "2003 BMW E39 M5", stockNumber "CF93682", vin "WBSDE93453CF93682", chassis "E39", mileage 89000, bodyStyle "Sedan", drive "Rear-Wheel Drive", exteriorColor "Jet Black", interiorColor "Black Leather", listingPrice 74990, inventoryStatus "Current Inventory", engineCodes "S62", engineType "Gasoline", engineSize "V8 Engine", transmission "6-Speed Manual", upload signatureShot and 10 galleryExterior1 images, add 3 listingThumbnailFeatures, write overview with headings, save successfully</description>
      </test>

      <test ac="AC1-8" task="Task 9">
        <id>T9.3</id>
        <description>Test TypeScript build validation: run `pnpm build` in terminal, verify Next.js build completes successfully with no TypeScript errors related to vehicle schema, verify /studio route generates in build output</description>
      </test>

      <test ac="AC5" task="Task 9">
        <id>T9.4</id>
        <description>Test all 8 image fields: upload image to signatureShot (verify required validation), soldShot (optional), secondaryShot (optional), upload 5 images to galleryExterior1, 5 to galleryExterior2, 3 to galleryExterior3, 5 to galleryInterior1, 3 to galleryInterior2, verify all uploads succeed with hotspot and alt text</description>
      </test>

      <test ac="AC1-8" task="Task 9">
        <id>T9.5</id>
        <description>Test required field validation: create new vehicle, leave listingTitle empty, attempt to save, verify validation error appears. Repeat for vin, chassis, mileage, bodyStyle, drive, exteriorColor, interiorColor, listingPrice, inventoryStatus, engineCodes, engineType, engineSize, transmission, signatureShot to confirm all required fields enforce validation</description>
      </test>

      <test ac="AC1-8" task="Task 9">
        <id>T9.6</id>
        <description>End-to-end workflow test: Access /studio, create new vehicle, populate all 40+ fields systematically (basic info → colors/pricing → status/visibility → engine/transmission → all 8 image fields → content fields → featured fields → metadata), save document, verify success message, reload Studio, find vehicle in list, open it, verify all field values persisted correctly including images, rich text formatting, toggles, and dropdown selections</description>
      </test>
    </ideas>
  </tests>
</story-context>
