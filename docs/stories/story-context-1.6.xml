<story-context id="story-1.6-shopping-cart-integration" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.6</storyId>
    <title>Shopping Cart Integration</title>
    <status>Ready</status>
    <generatedAt>2025-10-15</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>shopper</asA>
    <iWant>to add products to my cart and view my cart contents</iWant>
    <soThat>I can proceed to checkout when ready</soThat>
    <tasks>
      - Task 1: Verify existing cart system infrastructure (10 subtasks)
      - Task 2: Add "Add to Cart" button to ProductCard component (7 subtasks) - MAIN NEW FEATURE
      - Task 3: Add fitment compatibility display in cart items (5 subtasks) - BMW ENHANCEMENT
      - Task 4: Add toast notification enhancement (5 subtasks) - Optional
      - Task 5: Improve cart modal empty state (3 subtasks) - Optional
      - Task 6: Testing and accessibility validation (14 subtasks)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1" status="existing">"Add to Cart" button on product cards and detail pages - Detail page EXISTS, product cards NEW</criterion>
    <criterion id="AC2" status="existing">Visual feedback when item is added (toast notification or modal) - Cart modal auto-opens, toast OPTIONAL</criterion>
    <criterion id="AC3" status="existing">Cart icon in header shows item count - COMPLETE</criterion>
    <criterion id="AC4" status="existing">Cart panel/page displays all items with: image, title, price, quantity - COMPLETE</criterion>
    <criterion id="AC5" status="existing">Quantity can be updated in cart - COMPLETE</criterion>
    <criterion id="AC6" status="existing">Items can be removed from cart - COMPLETE</criterion>
    <criterion id="AC7" status="existing">Subtotal calculated and displayed - COMPLETE</criterion>
    <criterion id="AC8" status="existing">"Checkout" button navigates to Shopify checkout - COMPLETE</criterion>
    <criterion id="AC9" status="existing">Cart persists across page reloads - COMPLETE (Shopify Cart API + cookies)</criterion>
    <criterion id="AC10" status="existing">Empty cart state with call-to-action to browse products - COMPLETE</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/stories/story-1.6.md</path>
        <title>Story 1.6: Shopping Cart Integration</title>
        <section>Complete Story Definition</section>
        <snippet>Template provides 95% of cart functionality. Story focuses on: (1) Adding Add to Cart button to ProductCard component (listing/grid view), (2) Adding fitment compatibility badges in cart items, (3) Optional UX enhancements. Template already includes complete CartContext, cart modal, Add to Cart on detail page, quantity editing, item removal, checkout integration, and cart persistence.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR005: Cart Requirements</section>
        <snippet>Users shall be able to add products to a shopping cart and proceed through a standard checkout flow. Cart must integrate with Shopify inventory in real-time. Mobile responsiveness is critical with touch-optimized interactions.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>3.3: User Flow - Adding to Cart and Checkout</section>
        <snippet>Complete user journey from product discovery to cart to checkout. Cart modal slides in from right on desktop/mobile. Product cards include quick Add to Cart for one-click adding. Cart persists across navigation.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>4.2.7: Cart Component Specification</section>
        <snippet>Slide-out panel (390px width desktop, full width mobile). Displays items with image thumbnails, quantity controls, item removal, subtotal calculation. Auto-opens when items added for immediate feedback. HeadlessUI Dialog with backdrop blur and slide transitions.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>4.2.6: Product Card with Add to Cart</section>
        <snippet>Product cards in grid view should include Add to Cart button below price. Button disabled when out of stock. On click, item added to cart and modal opens automatically for confirmation. Mobile: minimum 44px touch target.</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 6: Shopping Cart Integration</section>
        <snippet>Estimated 8 points (revised to 3-5 points after template analysis). Part of Epic 1 (Core E-commerce Foundation). Integrates with Shopify Cart API. Dependencies: Product listing (Story 1.1) and product detail page (Story 1.5) complete.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.2.md</path>
        <title>Story 1.2: Vehicle Fitment Filter</title>
        <section>Fitment Parsing Utilities</section>
        <snippet>parseFitmentTag() function parses BMW fitment tags in format "BMW [Model] [Trim] [Year]". Returns ParsedFitmentTag object with make, model, trim, year. Also includes matchVehicle() to compare selected vehicle against product fitment.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.8.md</path>
        <title>Story 1.8: Visual Fitment Compatibility Indicators</title>
        <section>FitmentBadge Component</section>
        <snippet>FitmentBadge component with 3 variants: compatible (green checkmark), check-fitment (yellow warning), universal (gray). Includes tooltips with year information. WCAG AA accessible with icons + text, keyboard navigation, proper color contrast.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>components/cart/cart-context.tsx</path>
        <kind>context-provider</kind>
        <symbol>CartProvider, useCart</symbol>
        <lines>1-239</lines>
        <reason>Core cart state management with React useOptimistic for instant UI updates. Exports useCart() hook with { cart, updateCartItem, addCartItem }. Complete implementation - DO NOT MODIFY.</reason>
      </artifact>
      <artifact>
        <path>components/cart/modal.tsx</path>
        <kind>component</kind>
        <symbol>CartModal</symbol>
        <lines>1-257</lines>
        <reason>Slide-out cart UI with HeadlessUI Dialog. Displays items, quantity controls, subtotal, checkout button. Auto-opens when items added. ENHANCEMENT NEEDED: Add fitment badges to cart items (Task 3).</reason>
      </artifact>
      <artifact>
        <path>components/cart/add-to-cart.tsx</path>
        <kind>component</kind>
        <symbol>AddToCart</symbol>
        <lines>1-101</lines>
        <reason>Add to Cart button for product detail pages. Includes quantity selector, stock validation. Already complete for detail pages. Reference implementation for ProductCard button.</reason>
      </artifact>
      <artifact>
        <path>components/cart/open-cart.tsx</path>
        <kind>component</kind>
        <symbol>OpenCart</symbol>
        <lines>1-28</lines>
        <reason>Cart icon in header with item count badge. Complete implementation - already works correctly.</reason>
      </artifact>
      <artifact>
        <path>components/cart/actions.ts</path>
        <kind>server-actions</kind>
        <symbol>addItem, removeItem, updateItemQuantity, redirectToCheckout, createCartAndSetCookie</symbol>
        <lines>1-end</lines>
        <reason>Server Actions for Shopify Cart API integration. Handles cart persistence via cookies. Complete implementation - reuse in ProductCard.</reason>
      </artifact>
      <artifact>
        <path>components/cart/edit-item-quantity-button.tsx</path>
        <kind>component</kind>
        <symbol>EditItemQuantityButton</symbol>
        <lines>1-end</lines>
        <reason>+/- quantity buttons in cart with optimistic updates. Complete - no changes needed.</reason>
      </artifact>
      <artifact>
        <path>components/cart/delete-item-button.tsx</path>
        <kind>component</kind>
        <symbol>DeleteItemButton</symbol>
        <lines>1-end</lines>
        <reason>Remove item button in cart with optimistic updates. Complete - no changes needed.</reason>
      </artifact>
      <artifact>
        <path>components/product-card.tsx</path>
        <kind>component</kind>
        <symbol>ProductCard</symbol>
        <lines>1-end</lines>
        <reason>Product card component in grid/listing view. Currently server component with Link wrapper. MODIFICATION REQUIRED: Add "Add to Cart" button (Task 2). Must become client component to use useCart() hook.</reason>
      </artifact>
      <artifact>
        <path>lib/utils/vehicle.ts</path>
        <kind>utility</kind>
        <symbol>parseFitmentTag, matchVehicle, extractModelOptions, extractYearOptions</symbol>
        <lines>1-end</lines>
        <reason>Fitment parsing utilities from Story 1.2. parseFitmentTag() parses BMW tags. REUSE in cart modal to display fitment badges for cart items (Task 3).</reason>
      </artifact>
      <artifact>
        <path>components/FitmentBadge.tsx</path>
        <kind>component</kind>
        <symbol>FitmentBadge</symbol>
        <lines>1-end</lines>
        <reason>Badge component with variants (compatible, universal, check-fitment) from Story 1.8. REUSE in cart modal to show fitment for each cart item (Task 3).</reason>
      </artifact>
      <artifact>
        <path>contexts/FilterContext.tsx</path>
        <kind>context-provider</kind>
        <symbol>FilterProvider, useFilters</symbol>
        <lines>1-end</lines>
        <reason>Manages vehicle selection state with localStorage persistence. useFilters() returns filter context including selected vehicle. OPTIONAL: Use to highlight matching fitment in cart.</reason>
      </artifact>
      <artifact>
        <path>components/ui/badge.tsx</path>
        <kind>component</kind>
        <symbol>Badge</symbol>
        <lines>1-end</lines>
        <reason>ShadCN Badge component. Already used in fitment badges. Available for cart item badges if needed.</reason>
      </artifact>
      <artifact>
        <path>components/ui/tooltip.tsx</path>
        <kind>component</kind>
        <symbol>Tooltip</symbol>
        <lines>1-end</lines>
        <reason>ShadCN Tooltip component (Radix UI). Used in FitmentBadge for year information. Available if tooltips needed in cart.</reason>
      </artifact>
      <artifact>
        <path>components/welcome-toast.tsx</path>
        <kind>component</kind>
        <symbol>WelcomeToast</symbol>
        <lines>1-end</lines>
        <reason>Example toast implementation using sonner library. Reference for Task 4 (optional toast notifications on Add to Cart).</reason>
      </artifact>
      <artifact>
        <path>lib/shopify/types.ts</path>
        <kind>types</kind>
        <symbol>Cart, CartItem, Product, ProductVariant, Money</symbol>
        <lines>1-end</lines>
        <reason>TypeScript types for Shopify cart, products, variants. Essential for type-safe cart operations.</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="react" version="19.0.0" />
        <package name="next" version="15.0.3" />
        <package name="typescript" version="5.6.3" />
        <package name="@headlessui/react" version="^2.2.0" note="Used in cart modal" />
        <package name="@heroicons/react" version="^2.2.0" note="Icons for cart UI" />
        <package name="sonner" version="^1.7.2" note="Toast notifications (optional Task 4)" />
        <package name="clsx" version="^2.1.1" note="CSS class utilities" />
        <package name="lucide-react" version="^0.468.0" note="Additional icons if needed" />
      </node>
    </dependencies>
  </artifacts>

  <interfaces>
    <interface>
      <name>useCart Hook</name>
      <kind>React Hook</kind>
      <signature>
        const { cart, updateCartItem, addCartItem } = useCart()

        cart: Cart | undefined
        updateCartItem: (merchandiseId: string, updateType: 'plus' | 'minus' | 'delete') => void
        addCartItem: (variant: ProductVariant, product: Product) => void
      </signature>
      <path>components/cart/cart-context.tsx</path>
      <note>Main cart hook. Use addCartItem() in ProductCard to add items optimistically. Always pair with addItem() server action for Shopify API persistence.</note>
    </interface>
    <interface>
      <name>addItem Server Action</name>
      <kind>Server Action</kind>
      <signature>
        async function addItem(selectedVariantId: string | undefined): Promise&lt;string | undefined&gt;

        Returns: Error message if failed, undefined if successful
      </signature>
      <path>components/cart/actions.ts</path>
      <note>Server Action to add item to Shopify cart. Call after addCartItem() for optimistic UI + server persistence pattern.</note>
    </interface>
    <interface>
      <name>parseFitmentTag Function</name>
      <kind>Utility Function</kind>
      <signature>
        function parseFitmentTag(tag: string): ParsedFitmentTag | null

        ParsedFitmentTag: { make: 'BMW', model: string, trim?: string, year: number }
      </signature>
      <path>lib/utils/vehicle.ts</path>
      <note>Parses BMW fitment tags like "BMW X3 xDrive30i 2022". Returns null if tag doesn't match BMW format. Use in cart modal to extract fitment from product tags.</note>
    </interface>
    <interface>
      <name>FitmentBadge Component</name>
      <kind>React Component</kind>
      <signature>
        &lt;FitmentBadge
          variant="compatible" | "universal" | "check-fitment"
          modelName?: string
          year?: number
          selectedVehicle?: VehicleSelection
        /&gt;
      </signature>
      <path>components/FitmentBadge.tsx</path>
      <note>Display fitment badge in cart items. Use "compatible" variant with modelName and year extracted from parseFitmentTag().</note>
    </interface>
    <interface>
      <name>Cart Type</name>
      <kind>TypeScript Type</kind>
      <signature>
        type Cart = {
          id: string | undefined
          checkoutUrl: string
          totalQuantity: number
          lines: CartItem[]
          cost: { subtotalAmount: Money, totalAmount: Money, totalTaxAmount: Money }
        }

        type CartItem = {
          id?: string
          quantity: number
          cost: { totalAmount: Money }
          merchandise: {
            id: string
            title: string
            selectedOptions: Array&lt;{ name: string, value: string }&gt;
            product: {
              id: string
              handle: string
              title: string
              featuredImage: Image
              tags?: string[]
            }
          }
        }
      </signature>
      <path>lib/shopify/types.ts</path>
      <note>Product tags are available on CartItem.merchandise.product.tags - use these to extract fitment info for cart item badges.</note>
    </interface>
    <interface>
      <name>toast Function (Sonner)</name>
      <kind>Toast Library</kind>
      <signature>
        import { toast } from 'sonner'

        toast.success(message: string, { description?: string, action?: { label: string, onClick: () => void } })
      </signature>
      <path>node_modules/sonner</path>
      <note>Optional Task 4. Already installed. Trigger on Add to Cart with product name and "View Cart" action button.</note>
    </interface>
  </interfaces>

  <constraints>
    <constraint id="C1">Next.js 15 Server Components: ProductCard is currently a server component. Must add 'use client' directive to use useCart() hook. Consider performance implications.</constraint>
    <constraint id="C2">DO NOT MODIFY existing cart system: Cart context, modal, actions are complete and working. Only add enhancements (ProductCard button, fitment badges).</constraint>
    <constraint id="C3">Variant selection logic: If product has single variant, use variants[0]. If multiple variants, default to first available or add variant selection UI (complex - prefer simple first variant approach).</constraint>
    <constraint id="C4">Optimistic UI pattern: Always call addCartItem() (optimistic) THEN addItem() (server) in sequence. Never wait for server before updating UI.</constraint>
    <constraint id="C5">Fitment badges in cart: Only display if product.tags exists and contains BMW fitment tags. Use parseFitmentTag() to validate and extract data. Handle null returns gracefully.</constraint>
    <constraint id="C6">Mobile responsiveness: Add to Cart button on ProductCard must have minimum 44px touch target. Test on mobile viewports (320px - 768px).</constraint>
    <constraint id="C7">Accessibility: All cart buttons must have aria-labels. Ensure screen reader announces cart updates. Maintain WCAG AA standards (contrast, keyboard navigation).</constraint>
    <constraint id="C8">TypeScript strict mode: All code must pass TypeScript compiler with no errors. Use proper types from lib/shopify/types.ts.</constraint>
    <constraint id="C9">Event handling in ProductCard: preventDefault() and stopPropagation() on button click to prevent Link navigation when adding to cart.</constraint>
    <constraint id="C10">Cart persistence: Already handled by Shopify Cart API + cookie-based cart ID. Do not implement additional persistence logic.</constraint>
    <constraint id="C11">Loading states: Cart modal auto-opens on add (existing behavior). Toast notifications are optional enhancement (Task 4) - do not block implementation if skipped.</constraint>
    <constraint id="C12">Empty cart improvements: Optional Task 5. Do not block story completion if skipped. Empty state already exists with icon and message.</constraint>
    <constraint id="C13">Integration with FilterContext: Optional enhancement to highlight matching vehicle fitment in cart. Not required for story completion.</constraint>
    <constraint id="C14">Performance: useOptimistic ensures instant cart updates. Do not add loading spinners or artificial delays. Trust optimistic updates pattern.</constraint>
  </constraints>

  <tests>
    <standards>
      Testing follows existing patterns in the codebase. No formal test suite currently exists, but testing should include:
      - Manual testing across Chrome, Firefox, Safari
      - Mobile device testing (iOS Safari, Chrome Android)
      - Keyboard navigation testing (Tab, Enter, Escape)
      - Screen reader testing (VoiceOver on macOS, NVDA on Windows)
      - Cart persistence testing (add items, refresh page, verify cart retained)
      - Shopify checkout integration testing (verify checkout URL and redirect)
    </standards>
    <locations>
      No test files currently exist in project. Future tests would be located at:
      - __tests__/components/cart/ (if using Jest)
      - tests/e2e/cart.spec.ts (if using Playwright)
    </locations>
    <ideas>
      <idea ac="AC1">Test Add to Cart button appears on ProductCard in grid view. Button disabled when product unavailable. Button triggers cart modal to open.</idea>
      <idea ac="AC1">Test Add to Cart on product detail page still works (regression test). Quantity selector integration maintained.</idea>
      <idea ac="AC2">Test cart modal auto-opens when item added from ProductCard. Modal displays newly added item immediately (optimistic update).</idea>
      <idea ac="AC2">Optional: Test toast notification appears on Add to Cart with product name and "View Cart" action.</idea>
      <idea ac="AC3">Test cart icon badge shows correct item count (1, 2, 3, etc.). Badge updates immediately when items added.</idea>
      <idea ac="AC4">Test cart modal displays all items with image thumbnails, titles, prices, quantities. Verify layout on mobile and desktop.</idea>
      <idea ac="AC5">Test quantity +/- buttons update cart total. Test quantity changes persist after page refresh.</idea>
      <idea ac="AC6">Test delete button removes items from cart. Test removing last item shows empty cart state.</idea>
      <idea ac="AC7">Test subtotal calculation is accurate. Test taxes and shipping display correctly (calculated at checkout).</idea>
      <idea ac="AC8">Test "Proceed to Checkout" button redirects to Shopify checkout URL. Verify cart contents transferred to Shopify.</idea>
      <idea ac="AC9">Test cart persists after page refresh. Test cart persists across different routes (homepage, product page, search).</idea>
      <idea ac="AC10">Test empty cart state displays when no items. Test "Browse Products" CTA links to appropriate page.</idea>
      <idea ac="Task2">Test ProductCard becomes client component without breaking grid layout. Verify images, prices, fitment badges still render correctly.</idea>
      <idea ac="Task3">Test fitment badges display in cart items for products with BMW tags. Test badge shows correct model and year. Test products without fitment tags don't show badge.</idea>
      <idea ac="Task3">Test fitment badge integrates with FilterContext if vehicle selected. Test matching vehicle shows green "compatible" badge in cart.</idea>
      <idea ac="Task4">Optional: Test toast notification timing (appears immediately, dismisses after 3-5 seconds). Test "View Cart" button in toast opens modal.</idea>
      <idea ac="Task5">Optional: Test improved empty cart message is more engaging. Test "Browse Products" button links to correct route.</idea>
      <idea ac="Accessibility">Test all cart buttons have aria-labels. Test keyboard navigation works (Tab through items, Enter to checkout, Escape to close modal).</idea>
      <idea ac="Accessibility">Test screen reader announces "Added to cart" when item added. Test screen reader reads cart item count correctly.</idea>
      <idea ac="Accessibility">Test cart modal has focus trap (Tab cycles within modal). Test focus returns to trigger button when modal closed.</idea>
      <idea ac="Mobile">Test Add to Cart button on ProductCard meets 44px minimum touch target. Test cart modal fills screen on mobile (full width).</idea>
      <idea ac="Mobile">Test mobile sticky header cart icon remains accessible during scroll. Test cart item thumbnails and controls work on small screens.</idea>
      <idea ac="Performance">Test cart updates are instant (optimistic updates). Test no visible lag when adding items. Test multiple rapid adds don't break cart state.</idea>
      <idea ac="TypeScript">Verify no TypeScript errors in VSCode. Run `npm run build` and verify no compilation errors.</idea>
    </ideas>
  </tests>
</story-context>
