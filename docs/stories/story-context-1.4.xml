<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.4</storyId>
    <title>Product Search Functionality</title>
    <status>Ready</status>
    <generatedAt>2025-10-15</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.4.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user looking for specific parts</asA>
    <iWant>to search by product name, part number, or keywords</iWant>
    <soThat>I can quickly find what I need</soThat>
    <tasks>
      <task id="1" priority="critical">
        <title>Integrate search with FilterContext</title>
        <description>Add searchTerm to FilterState, implement URL synchronization, and extend filterProducts() to include search matching logic</description>
        <acceptanceCriteria>4</acceptanceCriteria>
        <subtasks>
          <subtask id="1.1">Add searchTerm: string to FilterState type in lib/types/filters.ts</subtask>
          <subtask id="1.2">Add setSearchTerm function to FilterContext in contexts/FilterContext.tsx</subtask>
          <subtask id="1.3">Initialize searchTerm from URL query parameter (?q=) on FilterContext mount</subtask>
          <subtask id="1.4">Persist searchTerm changes to URL query parameters (update ?q= without page reload)</subtask>
          <subtask id="1.5">Update filterProducts() utility in lib/utils/filters.ts to include search matching</subtask>
          <subtask id="1.6">Search across product title, description, SKU fields (case-insensitive)</subtask>
          <subtask id="1.7">Combine search with AND logic: products must match search AND active filters</subtask>
        </subtasks>
      </task>
      <task id="2" priority="high">
        <title>Display search term in FilterBadges</title>
        <description>Add search term badge to FilterBadges component with removal functionality</description>
        <acceptanceCriteria>4</acceptanceCriteria>
        <subtasks>
          <subtask id="2.1">Update FilterBadges component to display search term if present</subtask>
          <subtask id="2.2">Show badge format: "Search: [term]" with X removal button</subtask>
          <subtask id="2.3">Clear search term when badge is removed (update URL and FilterContext)</subtask>
          <subtask id="2.4">Ensure "Clear All Filters" also clears search term</subtask>
        </subtasks>
      </task>
      <task id="3" priority="medium">
        <title>Enhance search bar UX</title>
        <description>Add validation, clear button, and improved styling to existing search component</description>
        <acceptanceCriteria>7</acceptanceCriteria>
        <subtasks>
          <subtask id="3.1">Add minimum 2-character validation to search input</subtask>
          <subtask id="3.2">Show validation hint below input: "Type at least 2 characters to search"</subtask>
          <subtask id="3.3">Add clear button (X icon) that appears when search input has text</subtask>
          <subtask id="3.4">Clear button resets search input and removes search from FilterContext</subtask>
          <subtask id="3.5">Update search form styling to match ShadCN Input patterns from Story 1.3</subtask>
        </subtasks>
      </task>
      <task id="4" priority="low">
        <title>Add keyboard shortcuts</title>
        <description>Implement Cmd/Ctrl+K shortcut to focus search bar and Escape to clear focus</description>
        <acceptanceCriteria>Enhancement</acceptanceCriteria>
        <subtasks>
          <subtask id="4.1">Implement Cmd/Ctrl+K keyboard shortcut to focus search bar</subtask>
          <subtask id="4.2">Add keyboard shortcut hint in search placeholder: "Search... (âŒ˜K)"</subtask>
          <subtask id="4.3">Escape key clears focus from search bar</subtask>
          <subtask id="4.4">Handle keyboard shortcuts on mobile (show/hide appropriately)</subtask>
        </subtasks>
      </task>
      <task id="5" priority="medium">
        <title>Improve "no results" state</title>
        <description>Enhance empty state component with context-aware messages and suggestions</description>
        <acceptanceCriteria>5</acceptanceCriteria>
        <subtasks>
          <subtask id="5.1">Enhance empty state component in ProductGridWithFilters</subtask>
          <subtask id="5.2">Show different messages for different scenarios: search only, search + filters, filters only</subtask>
          <subtask id="5.3">Add helpful suggestions: "Try adjusting filters", "Clear search", "Browse all categories"</subtask>
          <subtask id="5.4">Add clickable "Clear all filters" button in empty state</subtask>
          <subtask id="5.5">Show active filters count in empty state for context</subtask>
        </subtasks>
      </task>
      <task id="6" priority="low">
        <title>Debounce and performance</title>
        <description>Add debouncing to client-side search for optimal performance</description>
        <acceptanceCriteria>Enhancement</acceptanceCriteria>
        <subtasks>
          <subtask id="6.1">Add 300ms debounce to client-side search filtering</subtask>
          <subtask id="6.2">Show subtle loading indicator during debounce period</subtask>
          <subtask id="6.3">Cancel pending debounced searches on unmount</subtask>
          <subtask id="6.4">Test performance with 100+ products to ensure no lag</subtask>
        </subtasks>
      </task>
      <task id="7" priority="high">
        <title>Testing and accessibility</title>
        <description>Comprehensive testing of search + filter combinations and accessibility validation</description>
        <acceptanceCriteria>1-7</acceptanceCriteria>
        <subtasks>
          <subtask id="7.1">Test search + vendor filter combination</subtask>
          <subtask id="7.2">Test search + category filter combination</subtask>
          <subtask id="7.3">Test search + vehicle fitment filter combination</subtask>
          <subtask id="7.4">Test search + multiple filters (all 3 types)</subtask>
          <subtask id="7.5">Verify URL updates correctly when search changes</subtask>
          <subtask id="7.6">Test minimum character validation (1 char = no search, 2+ chars = search)</subtask>
          <subtask id="7.7">Test keyboard shortcut (Cmd/Ctrl+K) on desktop</subtask>
          <subtask id="7.8">Verify screen reader announces search results count</subtask>
          <subtask id="7.9">Test search bar accessibility (ARIA labels, focus states)</subtask>
          <subtask id="7.10">Verify search term badge removal updates results immediately</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1" status="existing">Search bar prominently placed in header or above product grid (EXISTING: components/layout/navbar/search.tsx)</criterion>
    <criterion id="2" status="existing">Search executes on Enter key or search button click (EXISTING: Form submits to /search route)</criterion>
    <criterion id="3" status="existing">Results display matching products based on title, description, SKU, tags (EXISTING: Shopify API handles server-side search)</criterion>
    <criterion id="4" status="new">Search works in combination with active filters (NEW: Client-side integration with FilterContext needed)</criterion>
    <criterion id="5" status="existing-basic">No results state with helpful suggestions (EXISTING: Basic empty state in ProductGridWithFilters, needs enhancement)</criterion>
    <criterion id="6" status="existing">Search term is preserved in URL for sharing (EXISTING: ?q= query parameter)</criterion>
    <criterion id="7" status="new">Minimum 2 characters required before search executes (NEW: Validation enhancement needed)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR006 - Product Search</section>
        <snippet>FR006: Users shall be able to search for products by name, part number, or keywords. The system provides real-time search capabilities integrated with Shopify inventory.</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 4: Product Search Functionality</section>
        <snippet>Search bar prominently placed in header or above product grid. Search executes on Enter key or search button click. Results display matching products based on title, description, SKU, tags. Search works in combination with active filters. Minimum 2 characters required before search executes.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>3.2 - User Flow 2: Quick Product Search</section>
        <snippet>User clicks search bar in header, enters search term, search executes with Enter or click. Results display with multi-field search (part number, product name, keywords). Search combines with active filters using AND logic.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>4.2.5 - Search Bar Component Specification</section>
        <snippet>Search bar uses ShadCN Input component with search icon. Prominent placement in header, full-width on mobile. Placeholder: "Search for products...". Clear button (X) when search has text. Keyboard shortcut: Cmd/Ctrl+K to focus.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>4.1.2 - Header and Navigation</section>
        <snippet>Header layout includes: [Logo] [Vehicle Selector] [Search Bar] [Compare] [Cart]. Search bar is centered and prominent, full-width responsive on mobile viewports.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.3.md</path>
        <title>Story 1.3: Vendor & Category Filters</title>
        <section>FilterContext Pattern Reference</section>
        <snippet>FilterContext provides global filter state using React Context API. FilterState includes vendors[], categories[], vehicle. filterProducts() utility combines filters with AND logic. FilterBadges displays active filters with X removal. sessionStorage persistence for session-based filters.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.3.md</path>
        <title>Story 1.3: Vendor & Category Filters</title>
        <section>Empty State Implementation</section>
        <snippet>ProductGridWithFilters shows custom empty state when filteredProducts.length === 0. Displays search icon, "No products found" message, and suggestion to adjust filters. Different messaging for hasActiveFilters vs no filters.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>components/layout/navbar/search.tsx</path>
        <kind>component</kind>
        <symbol>Search</symbol>
        <lines>7-29</lines>
        <reason>EXISTING search bar component - DO NOT rebuild. Enhances with clear button, validation, keyboard shortcuts. Form submits to /search with ?q= parameter.</reason>
      </artifact>
      <artifact>
        <path>app/search/page.tsx</path>
        <kind>server-component</kind>
        <symbol>SearchPage</symbol>
        <lines>10-34</lines>
        <reason>EXISTING search results page using Shopify API. Fetches products with query parameter, displays result count, renders SearchProductsClient wrapper.</reason>
      </artifact>
      <artifact>
        <path>components/SearchProductsClient.tsx</path>
        <kind>component</kind>
        <symbol>SearchProductsClient</symbol>
        <lines>11-17</lines>
        <reason>Client wrapper for search results that integrates with FilterProvider. Shows how search page already uses FilterContext infrastructure.</reason>
      </artifact>
      <artifact>
        <path>contexts/FilterContext.tsx</path>
        <kind>context</kind>
        <symbol>FilterProvider, useFilters</symbol>
        <lines>15-154</lines>
        <reason>From Story 1.3. Extend FilterState to include searchTerm. Add setSearchTerm and clearSearchTerm functions. Initialize from URL ?q= parameter. Persist to URL on change.</reason>
      </artifact>
      <artifact>
        <path>lib/types/filters.ts</path>
        <kind>types</kind>
        <symbol>FilterState, FilterContextType</symbol>
        <lines>6-26</lines>
        <reason>From Story 1.3. Add searchTerm: string to FilterState. Add setSearchTerm and clearSearchTerm to FilterContextType interface.</reason>
      </artifact>
      <artifact>
        <path>lib/utils/filters.ts</path>
        <kind>utility</kind>
        <symbol>filterProducts</symbol>
        <lines>65-102</lines>
        <reason>From Story 1.3. Extend filterProducts() to include search matching logic. Search across title, description, SKU. Minimum 2 characters. Case-insensitive. AND logic with other filters.</reason>
      </artifact>
      <artifact>
        <path>components/FilterBadges.tsx</path>
        <kind>component</kind>
        <symbol>FilterBadges</symbol>
        <lines>7-99</lines>
        <reason>From Story 1.3. Add search term badge display. Format: "Search: [term]". Include X removal button. Ensure clearFilters also clears search.</reason>
      </artifact>
      <artifact>
        <path>components/ProductGridWithFilters.tsx</path>
        <kind>component</kind>
        <symbol>ProductGridWithFilters</symbol>
        <lines>86-113</lines>
        <reason>From Story 1.3. Enhance empty state to show different messages for search scenarios. Add active filter context and suggestions.</reason>
      </artifact>
    </code>
    <dependencies>
      <ecosystem name="Node.js">
        <package name="react" version="19.0.0">Core React library</package>
        <package name="next" version="15.3.0-canary.13">Next.js 15 framework with App Router</package>
        <package name="typescript" version="5.8.2">TypeScript for type safety</package>
        <package name="lucide-react" version="0.545.0">Icon library (X icon for clear button, Search icon)</package>
        <package name="@radix-ui/react-tooltip" version="1.2.8">ShadCN Tooltip component (already installed)</package>
        <package name="tailwind-merge" version="3.3.1">Tailwind utility for className merging</package>
        <package name="clsx" version="2.1.1">Conditional className utility</package>
      </ecosystem>
      <ecosystem name="Built-in">
        <package name="next/navigation">useRouter, useSearchParams, usePathname hooks for URL management</package>
        <package name="react">useState, useEffect, useMemo, useCallback hooks</package>
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1">Next.js 15 Server Components by default - use "use client" only when needed (state, effects, browser APIs)</constraint>
    <constraint id="2">TypeScript strict mode enabled - all components must be fully typed</constraint>
    <constraint id="3">DO NOT rebuild existing search bar (components/layout/navbar/search.tsx) - only enhance it</constraint>
    <constraint id="4">DO NOT rebuild search results page (app/search/page.tsx) - already uses Shopify API</constraint>
    <constraint id="5">Follow FilterContext patterns from Story 1.3 exactly (React Context API, sessionStorage for filters)</constraint>
    <constraint id="6">Search term must sync with URL ?q= parameter bidirectionally (read on mount, update on change)</constraint>
    <constraint id="7">Search matching combines with AND logic: products must match search AND all active filters</constraint>
    <constraint id="8">Minimum 2 characters required before search executes (client-side validation)</constraint>
    <constraint id="9">Case-insensitive search across product title, description, and variant SKU fields</constraint>
    <constraint id="10">Use ShadCN component patterns and styling (match existing FilterBadges brand-blue #529BCA)</constraint>
    <constraint id="11">Maintain accessibility standards: ARIA labels, keyboard navigation, screen reader announcements</constraint>
    <constraint id="12">Dark mode support required for all new/enhanced components</constraint>
    <constraint id="13">Responsive design: mobile-first approach, test 320px to 2560px viewports</constraint>
    <constraint id="14">Prettier formatting must be applied to all modified files before commit</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>FilterState (extended with searchTerm)</name>
      <kind>TypeScript type</kind>
      <signature>type FilterState = { vendors: string[]; categories: string[]; vehicle: VehicleSelection | null; searchTerm: string; }</signature>
      <path>lib/types/filters.ts</path>
    </interface>
    <interface>
      <name>FilterContextType (extended with search functions)</name>
      <kind>TypeScript type</kind>
      <signature>type FilterContextType = { filters: FilterState; updateFilters: (filters: Partial&lt;FilterState&gt;) =&gt; void; clearFilters: () =&gt; void; toggleVendor: (vendor: string) =&gt; void; toggleCategory: (category: string) =&gt; void; setVehicle: (model: string, year: number) =&gt; void; clearVehicle: () =&gt; void; setSearchTerm: (term: string) =&gt; void; clearSearchTerm: () =&gt; void; }</signature>
      <path>lib/types/filters.ts</path>
    </interface>
    <interface>
      <name>filterProducts (extended with search)</name>
      <kind>Function signature</kind>
      <signature>function filterProducts(products: Product[], filters: FilterState): Product[]</signature>
      <path>lib/utils/filters.ts</path>
    </interface>
    <interface>
      <name>useRouter (Next.js navigation)</name>
      <kind>Hook</kind>
      <signature>const router = useRouter(); router.push(url, options); router.replace(url, options);</signature>
      <path>next/navigation</path>
    </interface>
    <interface>
      <name>useSearchParams (URL query parameters)</name>
      <kind>Hook</kind>
      <signature>const searchParams = useSearchParams(); const q = searchParams.get('q'); const params = new URLSearchParams(searchParams);</signature>
      <path>next/navigation</path>
    </interface>
    <interface>
      <name>usePathname (current route path)</name>
      <kind>Hook</kind>
      <signature>const pathname = usePathname(); // returns current path like "/search"</signature>
      <path>next/navigation</path>
    </interface>
    <interface>
      <name>Product type (Shopify)</name>
      <kind>TypeScript type</kind>
      <signature>type Product = { title: string; description: string; vendor: string; tags: string[]; variants: Array&lt;{ sku?: string; }&gt;; ... }</signature>
      <path>lib/shopify/types</path>
    </interface>
  </interfaces>

  <tests>
    <standards>Testing follows manual validation approach as no formal test framework exists yet in the project. Build must pass with no TypeScript errors. Prettier formatting must be applied. Manual testing required for: filter combinations, URL synchronization, keyboard interactions, accessibility with screen readers, responsive behavior across viewports. Future iterations may add Jest + React Testing Library for automated component tests.</standards>
    <locations>
      <location>No formal test directories exist yet</location>
      <location>Manual testing via npm run dev and browser</location>
      <location>Build validation via npm run build</location>
      <location>Prettier check via npm run prettier:check</location>
    </locations>
    <ideas>
      <idea ac="1">Verify search bar is prominently visible in header on all page sizes (mobile, tablet, desktop)</idea>
      <idea ac="1">Confirm search bar is accessible via tab navigation and has proper ARIA labels</idea>
      <idea ac="2">Test form submission with Enter key updates URL to /search?q=term</idea>
      <idea ac="2">Test clicking search icon (if added) also submits form</idea>
      <idea ac="3">Verify Shopify API search returns results matching title, description, SKU (server-side, already working)</idea>
      <idea ac="4">Test search term + vendor filter combination filters client-side correctly</idea>
      <idea ac="4">Test search term + category filter combination works with AND logic</idea>
      <idea ac="4">Test search term + vehicle fitment filter combination shows only compatible products matching search</idea>
      <idea ac="4">Test search term + all 3 filter types (vendor, category, vehicle) applied simultaneously</idea>
      <idea ac="4">Verify search badge appears in FilterBadges when searchTerm is present</idea>
      <idea ac="4">Test removing search badge updates URL and clears search from FilterContext immediately</idea>
      <idea ac="4">Verify "Clear All Filters" button clears search term along with other filters</idea>
      <idea ac="5">Test empty state shows appropriate message when search has no results</idea>
      <idea ac="5">Test empty state shows different message when search + filters have no results</idea>
      <idea ac="5">Verify empty state includes helpful suggestions (clear search, adjust filters, browse categories)</idea>
      <idea ac="5">Test clicking "Clear all filters" button in empty state resets search and filters</idea>
      <idea ac="6">Verify ?q= parameter in URL persists when sharing link (copy URL, paste in new tab)</idea>
      <idea ac="6">Test FilterContext initializes searchTerm from URL ?q= parameter on page load</idea>
      <idea ac="6">Verify URL updates without full page reload when search term changes client-side</idea>
      <idea ac="7">Test entering 1 character shows validation hint "Type at least 2 characters to search"</idea>
      <idea ac="7">Test entering 2+ characters enables search and validation hint disappears</idea>
      <idea ac="7">Verify search does not execute with only 1 character entered</idea>
      <idea ac="7">Test clear button (X icon) appears when search input has text and clears on click</idea>
      <idea ac="enhancement">Test Cmd+K (Mac) and Ctrl+K (Windows) keyboard shortcut focuses search bar</idea>
      <idea ac="enhancement">Verify Escape key clears focus from search bar</idea>
      <idea ac="enhancement">Test keyboard shortcuts do not interfere with mobile touch interactions</idea>
      <idea ac="enhancement">Verify 300ms debounce prevents excessive filtering during rapid typing</idea>
      <idea ac="enhancement">Test loading indicator appears during debounce period</idea>
      <idea ac="accessibility">Verify screen reader announces search results count after search executes</idea>
      <idea ac="accessibility">Test keyboard navigation through search bar, clear button, and results</idea>
      <idea ac="accessibility">Verify ARIA labels are present and accurate on all search-related elements</idea>
      <idea ac="accessibility">Test focus states are visible on search input and clear button</idea>
    </ideas>
  </tests>
</story-context>
