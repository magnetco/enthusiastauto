<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>4.2</storyId>
    <title>Homepage Redesign for Dual Content</title>
    <status>Ready</status>
    <generatedAt>2025-10-22</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-4.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>visitor</asA>
    <iWant>a homepage that showcases both vehicles and parts</iWant>
    <soThat>I understand this is a unified BMW enthusiast platform</soThat>
    <tasks>
Task 1: Create hero section with unified platform value proposition (AC: #1, #8)
Task 2: Build Featured Vehicles section with Sanity CMS data (AC: #2, #7, #8)
Task 3: Build Popular Parts section with Shopify data (AC: #3, #7, #8)
Task 4: Implement clear CTAs for Browse Vehicles and Shop Parts (AC: #4)
Task 5: Create About section explaining Enthusiast Auto offering (AC: #5, #8)
Task 6: Implement mobile-first responsive layout (AC: #6)
Task 7: Optimize page load performance for <2s target (AC: #7)
Task 8: Implement SEO optimization (AC: #8)
    </tasks>
  </story>

  <acceptanceCriteria>
1. Hero section highlights the unified platform value proposition
2. "Featured Vehicles" section shows 3-4 current inventory highlights
3. "Popular Parts" section shows 6-8 bestselling or featured parts
4. Clear CTAs for "Browse Vehicles" and "Shop Parts"
5. About section explaining Enthusiast Auto's unique offering
6. Responsive layout optimized for mobile-first
7. Fast page load (<2s) with optimized images
8. SEO optimized with proper meta tags and headings
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="2.2 - Server-Side Rendering Strategy" snippet="Homepage uses ISR with 60s revalidation. Rendering decision matrix shows homepage = ISR (60s). Webhook-driven on-demand revalidation for Sanity content changes." />
      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="2.4 - Data Fetching Approach" snippet="Sanity CMS queries use GROQ with useCdn: false for fresh data. Shopify API uses existing shopifyFetch function with 300s cache. Dual-CMS data fetched in parallel using Promise.all for optimal performance." />
      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="2.1 - Architecture Pattern" snippet="Monolithic Next.js 15 with dual-CMS integration (Sanity + Shopify). Server Components for static content, Client Components for interactivity. Hybrid SSR/SSG/ISR rendering strategy." />
      <doc path="docs/PRD.md" title="Product Requirements Document" section="NFR001 - Performance" snippet="Page load: <2s on standard broadband. Lighthouse Performance: 85+ target. Mobile-first design (60%+ traffic expected). Images optimized via Next.js Image component." />
      <doc path="docs/PRD.md" title="Product Requirements Document" section="NFR010 - SEO & Discoverability" snippet="Lighthouse SEO score: 95+. Schema.org structured data for automotive listings. Proper meta tags: title, description, Open Graph for social sharing. Semantic HTML with clear heading hierarchy." />
      <doc path="docs/epic-stories.md" title="Epic Stories Breakdown" section="Epic 4, Story 4.2" snippet="Homepage Redesign for Dual Content - 8 points. Prerequisites: Epic 3 complete (vehicle inventory exists), Epic 1 complete (parts catalog exists). Technical notes: ISR with 5-minute revalidation, Next.js Server Components, fetch featured vehicles/parts at build time." />
      <doc path="docs/tech-specs/epic-3-vehicle-inventory-tech-spec.md" title="Epic 3 Technical Specification" section="Sanity Integration" snippet="Sanity client configuration, GROQ query patterns, ISR revalidation via webhooks, image CDN optimization. Dependencies: @sanity/client 3.62.0, next-sanity 9.12.0." />
    </docs>
    <code>
      <artifact path="sanity/lib/client.ts" kind="API client" symbol="client, authenticatedClient" lines="all" reason="Sanity CMS client setup with ISR caching (60s revalidation). Will fetch featured vehicles for homepage." />
      <artifact path="lib/shopify/index.ts" kind="API client" symbol="shopifyFetch, getProducts, getProductRecommendations" lines="all" reason="Shopify Storefront API client. Will fetch featured products for homepage popular parts section." />
      <artifact path="components/vehicles/VehicleCard.tsx" kind="component" symbol="VehicleCard" lines="all" reason="Server Component pattern for rendering vehicle cards with image, title, price, mileage. Reference for featured vehicles section." />
      <artifact path="components/vehicles/VehicleGrid.tsx" kind="component" symbol="VehicleGrid" lines="all" reason="Responsive 3-column grid layout pattern (grid-cols-1 sm:grid-cols-2 lg:grid-cols-3). Template for featured vehicles layout." />
      <artifact path="lib/sanity/queries/vehicles.ts" kind="service" symbol="getFeaturedVehicles" lines="all" reason="GROQ query function filters by featuredVehicle==true and status==current. Perfect for homepage featured section." />
      <artifact path="components/product-card.tsx" kind="component" symbol="ProductCard" lines="all" reason="Client Component with cart integration, fitment badges, add-to-cart. Reference for popular parts section." />
      <artifact path="components/product-grid.tsx" kind="component" symbol="ProductGrid, ProductGridLoading" lines="all" reason="4-column responsive grid with skeleton loading states. Template for popular parts layout." />
      <artifact path="components/ui/button.tsx" kind="UI component" symbol="Button" lines="all" reason="ShadCN Button with variants (default, outline). For all homepage CTAs (Browse Vehicles, Shop Parts)." />
      <artifact path="components/ui/card.tsx" kind="UI component" symbol="Card, CardHeader, CardContent" lines="all" reason="Composable card system with hover states. Foundation for vehicle/product showcase cards." />
      <artifact path="lib/utils/format.ts" kind="utility" symbol="formatCurrency, formatMileage" lines="all" reason="US currency and number formatting (Intl.NumberFormat). Format prices/mileage in featured cards." />
      <artifact path="sanity/lib/image.ts" kind="utility" symbol="urlFor" lines="all" reason="Sanity image URL builder using createImageUrlBuilder. Generate optimized image URLs for featured vehicles." />
      <artifact path="app/page.tsx" kind="page" symbol="HomePage" lines="all" reason="Current homepage to be redesigned. Structure: hero + product grid + footer. Will add vehicle section and enhance layout." />
      <artifact path="app/layout.tsx" kind="layout" symbol="RootLayout" lines="all" reason="Root layout with CartProvider, FilterProvider, font setup. Understand provider structure for homepage context." />
    </code>
    <dependencies>
      <node>
        <dependency name="next" version="15.3.0-canary.13" />
        <dependency name="react" version="19.0.0" />
        <dependency name="react-dom" version="19.0.0" />
        <dependency name="@sanity/client" version="^7.12.0" />
        <dependency name="@sanity/image-url" version="^1.2.0" />
        <dependency name="next-sanity" version="11" />
        <dependency name="sanity" version="4" />
        <dependency name="@radix-ui/react-slot" version="^1.2.3" />
        <dependency name="class-variance-authority" version="^0.7.1" />
        <dependency name="clsx" version="^2.1.1" />
        <dependency name="tailwind-merge" version="^3.3.1" />
        <dependency name="lucide-react" version="^0.545.0" />
        <dependency name="tailwindcss" version="^4.0.14" />
        <dependency name="typescript" version="5.8.2" />
        <dependency name="@types/node" version="22.13.10" />
        <dependency name="@types/react" version="19.0.12" />
      </node>
      <frameworks>
        <framework>Next.js 15 App Router with Turbopack</framework>
        <framework>React 19 Server Components</framework>
        <framework>Sanity CMS v4 with GROQ queries</framework>
        <framework>Tailwind CSS v4 utility-first styling</framework>
        <framework>ShadCN UI component library (Radix primitives)</framework>
        <framework>TypeScript 5.8 for type safety</framework>
      </frameworks>
    </dependencies>
  </artifacts>

  <constraints>
- Homepage must use ISR (Incremental Static Regeneration) with 60s revalidation per architecture
- Server Components required for data fetching (vehicles from Sanity, products from Shopify)
- Client Components only for interactive elements (Add to Cart buttons)
- Must fetch Sanity and Shopify data in parallel using Promise.all for performance
- Page load must be <2s on standard broadband (Lighthouse Performance 85+ target)
- Mobile-first design approach required (60%+ traffic expected)
- Images must be optimized via Next.js Image component (<100KB per thumbnail)
- Hero image must use priority loading (above fold)
- Below-fold images must use lazy loading
- Lighthouse SEO score must be 95+
- Must use semantic HTML: H1 for hero, H2 for sections
- All images require descriptive alt text for accessibility
- Touch targets must be â‰¥44px on mobile (WCAG AA compliance)
- Must reuse existing components: VehicleCard, ProductCard, Button, Card
- Naming conventions: PascalCase for components, camelCase for functions, kebab-case for routes
- Components must be placed in components/shared/ directory
  </constraints>
  <interfaces>
    <interface name="getFeaturedVehicles" kind="function signature" signature="getFeaturedVehicles(limit?: number): Promise<VehicleListItem[]>" path="lib/sanity/queries/vehicles.ts" />
    <interface name="getProducts" kind="function signature" signature="getProducts(): Promise<Product[]>" path="lib/shopify/index.ts" />
    <interface name="VehicleListItem" kind="TypeScript interface" signature="{ _id: string; title: string; year: number; make: string; model: string; price: number; mileage: number; status: string; images: SanityImage[]; slug: string }" path="lib/sanity/queries/vehicles.ts" />
    <interface name="Product" kind="TypeScript interface" signature="Shopify Product type with handle, title, description, priceRange, images, variants" path="lib/shopify/index.ts" />
    <interface name="Button" kind="React component" signature="Button({ variant, size, className, children, ...props })" path="components/ui/button.tsx" />
    <interface name="Card components" kind="React components" signature="Card, CardHeader, CardTitle, CardContent, CardFooter - composable card system" path="components/ui/card.tsx" />
    <interface name="Next.js metadata" kind="API" signature="export const metadata: Metadata = { title, description, openGraph }" path="app/page.tsx" />
    <interface name="ISR revalidation" kind="Next.js API" signature="export const revalidate = 60; // seconds" path="app/page.tsx" />
  </interfaces>
  <tests>
    <standards>Unit testing with Vitest for component rendering and data fetching logic. E2E testing with Playwright for user flows and navigation. Performance testing with Lighthouse (target: Performance 85+, SEO 95+). Accessibility testing with axe-core for WCAG AA compliance. Visual regression testing with screenshots across mobile (375px), tablet (768px), desktop (1280px) viewports. Mock Sanity and Shopify API calls with sample data in unit tests. Test Server Component data fetching with async/await patterns. Verify correct props passed to child components.</standards>
    <locations>app/page.test.tsx (unit tests), e2e/homepage.spec.ts (Playwright E2E), __tests__/ directory for component tests</locations>
    <ideas>
      <test ac="1" idea="Test hero section renders with H1 heading, value proposition copy, and background gradient" />
      <test ac="2" idea="Test Featured Vehicles section fetches 3-4 vehicles from Sanity and renders VehicleCards with images, prices, mileage" />
      <test ac="3" idea="Test Popular Parts section fetches 6-8 products from Shopify and renders ProductCards with add-to-cart buttons" />
      <test ac="4" idea="Test Browse Vehicles CTA navigates to /vehicles, Shop Parts CTA navigates to /products" />
      <test ac="5" idea="Test About section renders brand story content with Enthusiast Auto value proposition" />
      <test ac="6" idea="Test responsive layout: mobile (single column), tablet (2-col grid), desktop (3-4 col grid), verify no horizontal scroll" />
      <test ac="7" idea="Test page load <2s with Lighthouse mobile simulation, verify hero image has priority loading, below-fold images lazy load, Total Blocking Time <300ms" />
      <test ac="8" idea="Test SEO: verify meta tags (title, description, Open Graph), check H1/H2 heading hierarchy, validate schema.org Organization markup, Lighthouse SEO 95+" />
    </ideas>
  </tests>
</story-context>
