<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.5</storyId>
    <title>Product Detail Page with Fitment Info</title>
    <status>Ready</status>
    <generatedAt>2025-10-15</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.5.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>potential buyer</asA>
    <iWant>view detailed information about a specific product</iWant>
    <soThat>I can make an informed purchase decision</soThat>
    <tasks>
      <task id="1">Verify existing product detail page infrastructure (AC: #1, #2, #7, #9)</task>
      <task id="2">Add vendor and stock status badges (AC: #4, #5)</task>
      <task id="3">Build FitmentInfo component (AC: #3) - CORE NEW FEATURE</task>
      <task id="4">Build breadcrumb navigation component (AC: #8)</task>
      <task id="5">Add quantity selector component (AC: #6)</task>
      <task id="6">Build mobile sticky Add to Cart bar (AC: #9)</task>
      <task id="7">Testing and accessibility validation (AC: All)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Product detail page displays: title, price, full description, multiple images</criterion>
    <criterion id="2">Gallery supports image zoom and multiple views (thumbnail navigation)</criterion>
    <criterion id="3">Fitment compatibility clearly displayed (e.g., "Fits: BMW E46 2001-2006")</criterion>
    <criterion id="4">Vendor/brand information shown prominently</criterion>
    <criterion id="5">Stock availability status visible (In Stock / Out of Stock / Low Stock)</criterion>
    <criterion id="6">Add to Cart button prominently placed with quantity selector</criterion>
    <criterion id="7">Related products or "You may also like" section displays 4 similar products (optional for MVP)</criterion>
    <criterion id="8">Breadcrumb navigation back to category/listing</criterion>
    <criterion id="9">Mobile-optimized layout for product details (sticky Add to Cart bar on mobile)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR004: Product Detail View</section>
        <snippet>Users shall be able to view detailed product information including images, descriptions, pricing, and fitment compatibility</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 5: Product Detail Page with Fitment Info</section>
        <snippet>Acceptance Criteria: Product detail page displays title, price, full description, multiple images. Gallery supports image zoom and multiple views. Fitment compatibility clearly displayed. Effort: 3 points (revised from 5 - template provides 62% of functionality)</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>Section 9.2.2: Product Detail Page Layout</section>
        <snippet>Desktop: 2-column (50% image, 50% info), Image gallery with zoom, Sidebar sticky on scroll, Related products 4-column grid. Mobile: Full-width swiper, Sticky Add to Cart bar at bottom, Content stacked, Fitment info prominently displayed below images</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>Section 4.2.1: Product Card Component</section>
        <snippet>Specifications for product display patterns reused in detail page related products section</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>Section 5: Visual Design Foundation</section>
        <snippet>Color palette, typography, spacing rules for product detail elements</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>Section 7: Accessibility Standards</section>
        <snippet>WCAG 2.1 AA requirements for product pages - semantic HTML, keyboard navigation, ARIA labels, screen reader support</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Documentation</title>
        <section>Component Architecture - Product Components</section>
        <snippet>components/product/ structure with gallery.tsx, variant-selector.tsx. Server Components (Default) for data fetching. Client Components (Interactive) for cart operations</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.2.md</path>
        <title>Story 1.2: Vehicle Fitment Filter</title>
        <section>Fitment Parsing Utilities</section>
        <snippet>parseFitmentTag() and matchVehicle() utilities from lib/utils/vehicle.ts. Parse tags in format 'BMW [Model] [Trim] [Year]' (e.g., 'BMW X4 xDrive30i 2022'). Matching logic: exact model + year match</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.3.md</path>
        <title>Story 1.3: Vendor & Category Filters</title>
        <section>FilterContext Integration</section>
        <snippet>FilterContext with React Context API for global filter state. Vehicle selection persists and can be accessed via useFilters hook to highlight matching fitment</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.8.md</path>
        <title>Story 1.8: Visual Fitment Compatibility Indicators</title>
        <section>FitmentBadge Component</section>
        <snippet>FitmentBadge component with 3 variants (compatible, check-fitment, universal). Shows 'Fits Your [Model]' with green badge and checkmark icon. Tooltip support for additional compatibility information</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.5-implementation-analysis.md</path>
        <title>Story 1.5 Implementation Analysis</title>
        <section>Template Status Breakdown</section>
        <snippet>Template provides ~75% of functionality. Already complete: Product detail route (100%), Image gallery (95%), Add to Cart (90%), Related products (100%), Responsive layout (100%). Needs to be built (25%): Fitment Display (0%), Breadcrumbs (0%), Vendor/Stock badges (30%)</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>app/product/[handle]/page.tsx</path>
        <kind>server-component</kind>
        <symbol>ProductPage()</symbol>
        <lines>52-151</lines>
        <reason>Main product detail route - already implements product fetching, metadata, gallery, and related products. Need to add Breadcrumb component at line 108</reason>
      </file>
      <file>
        <path>components/product/product-description.tsx</path>
        <kind>react-component</kind>
        <symbol>ProductDescription()</symbol>
        <lines>7-29</lines>
        <reason>Displays title, price, description - need to add vendor badge, stock badge (lines 10-18), and FitmentInfo component here</reason>
      </file>
      <file>
        <path>components/product/gallery.tsx</path>
        <kind>client-component</kind>
        <symbol>Gallery()</symbol>
        <lines>8-97</lines>
        <reason>Image gallery with thumbnails and zoom - already complete, no changes needed</reason>
      </file>
      <file>
        <path>components/cart/add-to-cart.tsx</path>
        <kind>client-component</kind>
        <symbol>AddToCart(), SubmitButton()</symbol>
        <lines>60-94</lines>
        <reason>Cart integration - currently hardcoded to quantity 1, need to integrate with quantity selector</reason>
      </file>
      <file>
        <path>lib/utils/vehicle.ts</path>
        <kind>utility</kind>
        <symbol>parseFitmentTag(), matchVehicle()</symbol>
        <lines>18-33, 80-98</lines>
        <reason>Core fitment parsing utilities from Story 1.2 - use parseFitmentTag() to parse product.tags in FitmentInfo component</reason>
      </file>
      <file>
        <path>components/FitmentBadge.tsx</path>
        <kind>react-component</kind>
        <symbol>FitmentBadge()</symbol>
        <lines>16-84</lines>
        <reason>Badge component from Story 1.8 - reuse to display "Fits Your BMW", "Check Fitment", or "Universal Fit" badges</reason>
      </file>
      <file>
        <path>contexts/FilterContext.tsx</path>
        <kind>context</kind>
        <symbol>FilterProvider(), useFilters()</symbol>
        <lines>52-209</lines>
        <reason>Stores vehicle selection from Story 1.3 - use to access user's selected vehicle and highlight matching fitment</reason>
      </file>
      <file>
        <path>lib/types/filters.ts</path>
        <kind>types</kind>
        <symbol>VehicleSelection, FilterState</symbol>
        <lines>1-29</lines>
        <reason>Type definitions for vehicle and filter state - import VehicleSelection in FitmentInfo component</reason>
      </file>
      <file>
        <path>lib/shopify/types.ts</path>
        <kind>types</kind>
        <symbol>Product, ProductVariant, ShopifyProduct</symbol>
        <lines>71-138</lines>
        <reason>Shopify product types - includes vendor (line 12), tags (line 59), availableForSale (line 8) fields needed for badges and fitment</reason>
      </file>
      <file>
        <path>lib/shopify/index.ts</path>
        <kind>api</kind>
        <symbol>getProduct(), getProductRecommendations()</symbol>
        <lines>406-436</lines>
        <reason>Shopify API functions - already used to fetch product data with all necessary fields</reason>
      </file>
      <file>
        <path>lib/shopify/fragments/product.ts</path>
        <kind>graphql</kind>
        <symbol>productFragment</symbol>
        <lines>4-64</lines>
        <reason>GraphQL fragment defining product fields - includes vendor (line 12), tags (line 59), availableForSale (line 8)</reason>
      </file>
      <file>
        <path>components/ui/badge.tsx</path>
        <kind>shadcn-component</kind>
        <symbol>Badge()</symbol>
        <lines>28-44</lines>
        <reason>ShadCN Badge component - use for vendor and stock status badges with variants (secondary, destructive)</reason>
      </file>
      <file>
        <path>components/ui/tooltip.tsx</path>
        <kind>shadcn-component</kind>
        <symbol>Tooltip, TooltipContent, TooltipProvider</symbol>
        <lines>8-59</lines>
        <reason>ShadCN Tooltip component - already used in FitmentBadge, reference for tooltip patterns</reason>
      </file>
      <file>
        <path>components/product/product-context.tsx</path>
        <kind>context</kind>
        <symbol>ProductProvider(), useProduct()</symbol>
        <lines>25-88</lines>
        <reason>Product variant state management - already integrated with product page, reference for state patterns</reason>
      </file>
    </code>
    <dependencies>
      <ecosystem>Node.js</ecosystem>
      <runtime>
        <package name="next" version="15.3.0-canary.13">Next.js 15 with Server Components and App Router</package>
        <package name="react" version="19.0.0">React 19 with RSC support</package>
        <package name="react-dom" version="19.0.0">React DOM 19</package>
        <package name="typescript" version="5.8.2">TypeScript strict mode</package>
      </runtime>
      <ui>
        <package name="@radix-ui/react-accordion" version="^1.2.12">Radix Accordion - already installed</package>
        <package name="@radix-ui/react-checkbox" version="^1.3.3">Radix Checkbox - already installed</package>
        <package name="@radix-ui/react-select" version="^2.2.6">Radix Select - already installed</package>
        <package name="@radix-ui/react-tooltip" version="^1.2.8">Radix Tooltip - already installed for FitmentBadge</package>
        <package name="@radix-ui/react-slot" version="^1.2.3">Radix Slot - already installed</package>
        <package name="@heroicons/react" version="^2.2.0">Heroicons - for +/- icons in quantity selector</package>
        <package name="lucide-react" version="^0.545.0">Lucide icons - alternative icon library</package>
        <package name="@headlessui/react" version="^2.2.0">Headless UI components</package>
      </ui>
      <styling>
        <package name="tailwindcss" version="^4.0.14">Tailwind CSS 4.0 with dark mode support</package>
        <package name="class-variance-authority" version="^0.7.1">CVA for component variants</package>
        <package name="clsx" version="^2.1.1">Utility for className composition</package>
        <package name="tailwind-merge" version="^3.3.1">Merge Tailwind classes</package>
        <package name="@tailwindcss/typography" version="^0.5.16">Typography plugin</package>
      </styling>
      <other>
        <package name="geist" version="^1.3.1">Vercel Geist font</package>
        <package name="sonner" version="^2.0.1">Toast notifications</package>
      </other>
      <note>All required dependencies are already installed. No new packages needed for Story 1.5.</note>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Next.js 15 Server Components - Product page is Server Component, use 'use client' directive for interactive components (FitmentInfo, QuantitySelector)</constraint>
    <constraint>Do NOT modify gallery.tsx or add-to-cart.tsx core logic - these are already complete and working</constraint>
    <constraint>Reuse existing utilities - parseFitmentTag() and matchVehicle() from lib/utils/vehicle.ts (Story 1.2)</constraint>
    <constraint>Reuse FitmentBadge component from Story 1.8 - do not recreate fitment badge logic</constraint>
    <constraint>Use FilterContext from Story 1.3 to access vehicle selection via useFilters() hook</constraint>
    <constraint>Follow existing ShadCN component patterns - use Badge and Tooltip components for vendor/stock display</constraint>
    <constraint>Maintain WCAG 2.1 AA accessibility - add aria-labels, ensure keyboard navigation, test with screen readers</constraint>
    <constraint>TypeScript strict mode - all new components must have proper type definitions</constraint>
    <constraint>Shopify tag format - Parse tags in format "BMW [Model] [Trim] [Year]" (e.g., "BMW X4 xDrive30i 2022")</constraint>
    <constraint>Performance - Minimize client-side JavaScript, leverage Next.js Image optimization, use React Server Components where possible</constraint>
    <constraint>Mobile-first responsive design - Sticky Add to Cart bar should hide on desktop (lg:hidden), breadcrumb should be mobile-friendly</constraint>
    <constraint>Schema.org markup - Add BreadcrumbList JSON-LD structured data for SEO</constraint>
    <constraint>Template infrastructure complete - 62% of functionality already exists, focus only on BMW-specific enhancements</constraint>
    <constraint>Dark mode support - Ensure all new components work with existing Tailwind dark mode classes</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>Product</name>
      <kind>TypeScript Type</kind>
      <signature>Product { id: string; handle: string; title: string; description: string; vendor: string; tags: string[]; availableForSale: boolean; priceRange: {...}; variants: ProductVariant[]; images: Image[]; featuredImage: Image; seo: SEO; }</signature>
      <path>lib/shopify/types.ts</path>
    </interface>
    <interface>
      <name>parseFitmentTag()</name>
      <kind>Function</kind>
      <signature>parseFitmentTag(tag: string): ParsedFitmentTag | null</signature>
      <path>lib/utils/vehicle.ts</path>
    </interface>
    <interface>
      <name>matchVehicle()</name>
      <kind>Function</kind>
      <signature>matchVehicle(product: Product, vehicle: VehicleSelection | null): boolean</signature>
      <path>lib/utils/vehicle.ts</path>
    </interface>
    <interface>
      <name>useFilters()</name>
      <kind>React Hook</kind>
      <signature>useFilters(): FilterContextType { filters, setFilters, clearFilters, vehicle, setVehicle, clearVehicle, filteredProducts }</signature>
      <path>contexts/FilterContext.tsx</path>
    </interface>
    <interface>
      <name>FitmentBadge</name>
      <kind>React Component</kind>
      <signature>FitmentBadge({ fitment, selectedVehicle, variant }: FitmentBadgeProps): JSX.Element</signature>
      <path>components/FitmentBadge.tsx</path>
    </interface>
    <interface>
      <name>Badge</name>
      <kind>ShadCN Component</kind>
      <signature>Badge({ variant, className, ...props }: BadgeProps): JSX.Element // variants: default | secondary | destructive | outline</signature>
      <path>components/ui/badge.tsx</path>
    </interface>
    <interface>
      <name>getProduct()</name>
      <kind>Async Function</kind>
      <signature>getProduct(handle: string): Promise&lt;Product | undefined&gt;</signature>
      <path>lib/shopify/index.ts</path>
    </interface>
    <interface>
      <name>VehicleSelection</name>
      <kind>TypeScript Type</kind>
      <signature>VehicleSelection { model: string; year: string; }</signature>
      <path>lib/types/filters.ts</path>
    </interface>
  </interfaces>
  <tests>
    <standards>No formal testing framework currently configured. Testing strategy focuses on manual testing, browser testing (Chrome, Safari, Firefox), accessibility validation with Lighthouse (target score 90+), and screen reader testing (VoiceOver/NVDA). Build-time TypeScript validation ensures type safety. Follow existing patterns from Stories 1.1-1.4 for quality validation.</standards>
    <locations>No test directory exists. Manual testing performed on localhost:3000 during development.</locations>
    <ideas>
      <test ac="1">Verify product detail page renders with correct title, price, description, and images from Shopify API</test>
      <test ac="1">Test 404 handling when product handle doesn't exist</test>
      <test ac="2">Verify gallery displays thumbnails with correct navigation arrows</test>
      <test ac="2">Test image zoom on hover (desktop) and pinch-to-zoom (mobile)</test>
      <test ac="2">Test gallery keyboard navigation (arrow keys, Tab)</test>
      <test ac="3">Test FitmentInfo component with product that has BMW fitment tags</test>
      <test ac="3">Test FitmentInfo component with product that has no fitment tags (show "Universal Fit")</test>
      <test ac="3">Test FitmentInfo component with multiple fitment tags (display all as stacked badges)</test>
      <test ac="3">Test fitment badge highlighting when user has selected vehicle in FilterContext</test>
      <test ac="3">Test parseFitmentTag() with various tag formats (e.g., "BMW X4 xDrive30i 2022")</test>
      <test ac="4">Verify vendor badge displays product.vendor correctly</test>
      <test ac="4">Test vendor badge styling matches ShadCN Badge secondary variant</test>
      <test ac="5">Test stock status badge shows "In Stock" (green) when availableForSale is true</test>
      <test ac="5">Test stock status badge shows "Out of Stock" (red) when availableForSale is false</test>
      <test ac="6">Test quantity selector increments/decrements correctly (min: 1, no max)</test>
      <test ac="6">Test quantity selector integrates with AddToCart component</test>
      <test ac="6">Test quantity selector keyboard input (type number directly)</test>
      <test ac="6">Test quantity selector aria-labels for accessibility</test>
      <test ac="7">Verify related products section displays 4 Shopify recommendations</test>
      <test ac="7">Test related products grid responsive layout (4 columns desktop, 2 columns tablet, horizontal scroll mobile)</test>
      <test ac="8">Test breadcrumb navigation displays Home > Category > Product</test>
      <test ac="8">Test breadcrumb links navigate correctly (Home to /, Category to /search/[handle])</test>
      <test ac="8">Verify breadcrumb schema.org JSON-LD structured data is valid</test>
      <test ac="8">Test breadcrumb aria-label="Breadcrumb" for screen readers</test>
      <test ac="9">Test mobile sticky Add to Cart bar appears at bottom on mobile (< lg breakpoint)</test>
      <test ac="9">Test mobile sticky bar hides on desktop (>= lg breakpoint)</test>
      <test ac="9">Test mobile sticky bar z-index doesn't conflict with navbar</test>
      <test ac="all">Run Lighthouse accessibility audit (target: 90+ score)</test>
      <test ac="all">Test keyboard navigation for all interactive elements (Tab, Enter, Space, Arrow keys)</test>
      <test ac="all">Test with VoiceOver (Safari/Mac) and NVDA (Firefox/Windows) screen readers</test>
      <test ac="all">Verify TypeScript build passes with no errors (npm run build)</test>
      <test ac="all">Test responsive layouts at 320px, 768px, 1024px, 1920px viewports</test>
      <test ac="all">Test dark mode display for all new components</test>
    </ideas>
  </tests>
</story-context>
