<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>5</epicId>
    <storyId>5.2</storyId>
    <title>Social Login Integration</title>
    <status>Draft</status>
    <generatedAt>2025-10-23</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-5.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>sign in with Google or Facebook</iWant>
    <soThat>I can access the site quickly without creating a new password</soThat>
    <tasks>
      <task id="1" acs="1,6,7">Setup Google OAuth Provider Configuration (10 subtasks)</task>
      <task id="2" acs="2,6,7">Setup Facebook OAuth Provider Configuration (10 subtasks)</task>
      <task id="3" acs="1,2,3,4,7">Configure NextAuth.js OAuth Providers (10 subtasks)</task>
      <task id="4" acs="1,2,5">Add Social Login Buttons to Signin Page UI (12 subtasks)</task>
      <task id="5" acs="3,4,5">Implement First-Time Social Login User Creation (10 subtasks)</task>
      <task id="6" acs="4,5">Implement Account Linking Logic (10 subtasks)</task>
      <task id="7" acs="5,7">Error Handling and User Feedback (12 subtasks)</task>
      <task id="8" acs="7">OAuth Security Hardening (10 subtasks)</task>
      <task id="9" acs="all">Testing and QA (16 subtasks)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1" title="Google OAuth Integration">
      - "Sign in with Google" button on signin page with ShadCN Button and Google icon
      - Google OAuth 2.0 provider configured in NextAuth.js
      - Google Cloud Console OAuth app with correct redirect URIs
      - Redirect URIs: localhost:3000 (dev), shop.enthusiastauto.com (prod)
      - Google OAuth flow redirects to consent screen and back
      - Profile data (name, email, avatar) imported automatically
      - Email used as unique identifier for user matching
      - Account linking if Google email matches existing account
      - Environment variables: GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET
      - Error handling, loading state, keyboard/screen reader accessibility
    </criterion>
    <criterion id="AC2" title="Facebook OAuth Integration">
      - "Sign in with Facebook" button on signin page with ShadCN Button and Facebook icon
      - Facebook OAuth 2.0 provider configured in NextAuth.js
      - Meta for Developers OAuth app with correct redirect URIs
      - Redirect URIs: localhost:3000 (dev), shop.enthusiastauto.com (prod)
      - Facebook OAuth flow redirects to login dialog and back
      - Profile data (name, email, avatar) imported automatically
      - Email used as unique identifier for user matching
      - Account linking if Facebook email matches existing account
      - Environment variables: FACEBOOK_CLIENT_ID, FACEBOOK_CLIENT_SECRET
      - Error handling, loading state, keyboard/screen reader accessibility
    </criterion>
    <criterion id="AC3" title="First-Time Social Login Flow">
      - First-time Google/Facebook login creates new user account
      - User record with OAuth profile: name, email, image
      - emailVerified field automatically set (OAuth emails pre-verified)
      - Account record in Account table with provider details
      - User session created immediately after account creation
      - User redirected to /dashboard after successful login
      - No password required for social login users
      - Compatible with existing Prisma user model
      - Success message: "Welcome! Your account has been created."
      - Option to add password later for email/password access
    </criterion>
    <criterion id="AC4" title="Account Linking for Existing Users">
      - Link Google/Facebook account if email matches existing account
      - NextAuth.js automatic account linking strategy
      - New Account record linked to existing User when emails match
      - One user, multiple accounts in Account table
      - Sign in with any linked method (email/password, Google, Facebook)
      - Linked accounts visible in profile (Story 5.3 adds UI)
      - Success message: "Your [Google/Facebook] account has been linked."
      - Unlinking supported if user has multiple auth methods
      - Must add password before unlinking only social account
      - Email conflicts handled gracefully
    </criterion>
    <criterion id="AC5" title="Error Handling and User Feedback">
      - OAuth cancelled: "Sign-in cancelled. Please try again."
      - Provider errors: "Unable to sign in with [provider]. Please try again later."
      - Rate limiting with retry logic
      - Email already in use: "Email already registered. Please sign in with [provider]."
      - Loading spinner: "Redirecting to [Google/Facebook]..."
      - Success: "Successfully signed in with [Google/Facebook]!"
      - ShadCN Alert component for error/success messages
      - Errors logged to Sentry (no sensitive data)
      - User-friendly messages (no technical jargon)
      - No user enumeration (don't reveal if email exists)
      - Screen reader announcements for errors
    </criterion>
    <criterion id="AC6" title="OAuth Scopes and Permissions">
      - Google scopes: openid, email, profile only
      - Facebook permissions: email, public_profile only
      - No additional permissions beyond basic profile
      - Consent screens show data access clearly
      - Profile data stored only in User table
      - Access tokens in Account table for future API calls
      - Refresh tokens encrypted at rest by Vercel Postgres
      - NextAuth.js automatic token refresh
      - User can revoke OAuth access externally
    </criterion>
    <criterion id="AC7" title="Security and Privacy Compliance">
      - OAuth state parameter prevents CSRF (NextAuth.js built-in)
      - Redirect URIs validated against whitelist
      - Nonce parameter for OpenID Connect (Google) prevents replay attacks
      - GDPR/CCPA compliance (collect only necessary data)
      - Privacy policy mentions OAuth providers
      - Terms of service mention Google/Facebook integration
      - User consent before creating account with OAuth data
      - OAuth tokens encrypted in transit (HTTPS only)
      - OAuth tokens encrypted at rest in database
      - Session cookies HTTP-only and secure
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR016 - User Authentication</section>
        <snippet>Users shall be able to register for user accounts and authenticate using email/password or social login providers (Google, Facebook). Epic 5 covers authentication system with 7-9 stories including social login integration.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Section 1.1 - Technology Decisions (line 38)</section>
        <snippet>NextAuth.js v5.0.0-beta selected for authentication. Self-hosted auth (no vendor lock-in), supports social OAuth + email/password, Prisma adapter for Postgres, production-ready. OAuth providers: Google and Facebook configured with client credentials.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Section 3.1 - Database Schema (lines 419-446)</section>
        <snippet>Prisma Account table supports multiple authentication providers per user. Type='oauth' for social login, provider field stores 'google'/'facebook', providerAccountId stores OAuth user ID, tokens encrypted at rest. One User can have many Accounts for multi-provider support.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Section 4.2 - Authentication Endpoints (lines 774-828)</section>
        <snippet>NextAuth.js endpoints at /api/auth/[...nextauth]. GoogleProvider and FacebookProvider configured with client ID/secret from env vars. OAuth callbacks handle profile data import, account linking, and session creation. CSRF protection via state parameter built-in.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Section 5.1 - Auth Strategy (lines 954-980)</section>
        <snippet>OAuth user flow: User clicks social login → redirects to provider → callback creates User record → session cookie. First-time login creates User + Account records. Returning users load existing User. Email verification automatic for OAuth (emailVerified timestamp).</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Section 17.1 - Security Checklist (lines 2717-2727)</section>
        <snippet>NextAuth.js with secure session cookies (httpOnly, sameSite, secure). Database sessions revocable. OAuth providers (Google, Facebook) for secure social login. Protected routes via middleware. CSRF protection built into NextAuth. Password hashing handled by NextAuth.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>ADR-007 - NextAuth.js Database Sessions (line 2132)</section>
        <snippet>Store sessions in Postgres database, not JWT tokens. Sessions are revocable (security improvement), stored server-side (no client exposure), validated on each request. Tokens stored in Account table encrypted by Vercel Postgres.</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Stories Document</title>
        <section>Epic 5 - User Management System (lines 708-900)</section>
        <snippet>Epic 5 covers user authentication and personalized features. Story 5.1 (NextAuth.js foundation) complete. Story 5.2 (Social Login Integration) adds Google/Facebook OAuth providers. Prerequisites: Story 5.1 complete, OAuth apps created. 5 points estimate.</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Stories Document</title>
        <section>Story 5.2 - Social Login Integration (lines 749-776)</section>
        <snippet>Add Google and Facebook OAuth buttons, configure providers in NextAuth.js, handle account linking, OAuth flow redirects, profile data import, error handling. Technical notes: configure OAuth providers, handle account linking scenarios, store tokens securely.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-5.1.md</path>
        <title>Story 5.1 - User Authentication with NextAuth.js (Predecessor)</title>
        <section>Complete Story</section>
        <snippet>Story 5.1 complete (2025-10-23). Implemented NextAuth.js v5 with email/password auth, Prisma adapter, Vercel Postgres database, email verification via Resend, password reset flow, protected routes middleware, JWT sessions. Prisma schema includes User, Account, Session, VerificationToken tables. Account table designed for multi-provider support (type, provider, providerAccountId fields ready for OAuth).</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>lib/auth/config.ts</path>
        <kind>auth-configuration</kind>
        <symbol>authConfig</symbol>
        <lines>1-70</lines>
        <reason>Existing NextAuth.js configuration with CredentialsProvider. Add GoogleProvider and FacebookProvider here. Callbacks section (jwt, session) ready for OAuth profile data extension.</reason>
      </artifact>
      <artifact>
        <path>app/auth/signin/page.tsx</path>
        <kind>page-component</kind>
        <symbol>SigninPage</symbol>
        <lines>1-180</lines>
        <reason>Existing sign-in page with email/password form. Add social login buttons above form (Google, Facebook). Reuse error/success Alert pattern for OAuth feedback. Loading state pattern already implemented.</reason>
      </artifact>
      <artifact>
        <path>prisma/schema.prisma</path>
        <kind>database-schema</kind>
        <symbol>Account model</symbol>
        <lines>32-48</lines>
        <reason>Account table ready for OAuth. Fields: type (oauth), provider (google/facebook), providerAccountId, access_token, refresh_token, expires_at, scope, id_token. No schema changes needed - designed for multi-provider support from Story 5.1.</reason>
      </artifact>
      <artifact>
        <path>prisma/schema.prisma</path>
        <kind>database-schema</kind>
        <symbol>User model</symbol>
        <lines>17-30</lines>
        <reason>User table ready for OAuth users. emailVerified field for auto-verification, password nullable for OAuth-only users, image field for avatar. Account relation one-to-many supports multiple providers per user.</reason>
      </artifact>
      <artifact>
        <path>lib/auth/types.ts</path>
        <kind>type-definitions</kind>
        <symbol>Session, User interfaces</symbol>
        <lines>1-27</lines>
        <reason>NextAuth type extensions. Session.user and User interfaces include id, email, name, image, emailVerified. May need to extend for OAuth provider field in session.</reason>
      </artifact>
      <artifact>
        <path>components/ui/button.tsx</path>
        <kind>ui-component</kind>
        <symbol>Button</symbol>
        <lines>all</lines>
        <reason>ShadCN Button component for social login buttons. Use variant="outline" for Google/Facebook buttons. Supports disabled state for loading.</reason>
      </artifact>
      <artifact>
        <path>components/ui/alert.tsx</path>
        <kind>ui-component</kind>
        <symbol>Alert</symbol>
        <lines>all</lines>
        <reason>ShadCN Alert component for OAuth error/success messages. Use variant="destructive" for errors, variant="default" for success messages. Already used in signin page.</reason>
      </artifact>
      <artifact>
        <path>lib/auth/SessionProvider.tsx</path>
        <kind>provider-component</kind>
        <symbol>SessionProvider</symbol>
        <lines>all</lines>
        <reason>NextAuth SessionProvider wrapper for client-side session access. Already configured in layout from Story 5.1. No changes needed.</reason>
      </artifact>
      <artifact>
        <path>app/api/auth/[...nextauth]/route.ts</path>
        <kind>api-route</kind>
        <symbol>NextAuth handler</symbol>
        <lines>all</lines>
        <reason>NextAuth API route handler. Exports authConfig to GET/POST endpoints. OAuth callback URLs will be handled here automatically (/api/auth/callback/google, /api/auth/callback/facebook).</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package>next-auth</package>
        <version>5.0.0-beta.29</version>
        <note>Already installed from Story 5.1. Includes GoogleProvider and FacebookProvider - no additional packages needed</note>
      </node>
      <node>
        <package>@auth/prisma-adapter</package>
        <version>^2.11.0</version>
        <note>Already installed from Story 5.1. Handles OAuth account creation and linking automatically</note>
      </node>
      <node>
        <package>@prisma/client</package>
        <version>^6.18.0</version>
        <note>Already installed. Account and User models ready for OAuth (no schema changes needed)</note>
      </node>
      <node>
        <package>lucide-react</package>
        <version>^0.545.0</version>
        <note>Already installed. Use Chrome icon for Google, Facebook icon for Facebook button</note>
      </node>
      <node>
        <package>react-hook-form</package>
        <version>^7.65.0</version>
        <note>Already installed. Used in existing signin page for form state management</note>
      </node>
      <node>
        <package>zod</package>
        <version>^3.25.76</version>
        <note>Already installed. Used for form validation in signin page</note>
      </node>
      <node>
        <package>@radix-ui/react-*</package>
        <version>various</version>
        <note>ShadCN UI dependencies already installed (Button, Alert components)</note>
      </node>
      <node>
        <package>tailwindcss</package>
        <version>^4.0.14</version>
        <note>Already installed for styling social login buttons</note>
      </node>
      <node>
        <package>@vercel/postgres</package>
        <version>^0.10.0</version>
        <note>Already installed. Provides encrypted storage for OAuth tokens at rest</note>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>NextAuth.js v5 configuration pattern: providers array in authConfig, callbacks for jwt/session, pages for custom sign-in</constraint>
    <constraint>Prisma adapter pattern: PrismaAdapter(prisma) handles OAuth account creation/linking automatically, no manual Account record creation needed</constraint>
    <constraint>OAuth redirect URIs must be whitelisted in Google Cloud Console and Meta for Developers settings</constraint>
    <constraint>Environment variables required: GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, FACEBOOK_CLIENT_ID, FACEBOOK_CLIENT_SECRET (add to .env.local and Vercel)</constraint>
    <constraint>Social login buttons must use ShadCN Button component with variant="outline" for consistency with existing UI</constraint>
    <constraint>Error messages must use ShadCN Alert component with variant="destructive" (already used in signin page)</constraint>
    <constraint>Loading states must be implemented (button disabled, spinner shown) during OAuth redirect flow</constraint>
    <constraint>Accessibility: buttons must have aria-label, keyboard navigation, screen reader support (follow existing signin page patterns)</constraint>
    <constraint>TypeScript strict mode: all OAuth types must be properly typed (NextAuth providers, callbacks, session)</constraint>
    <constraint>No password field required for OAuth-only users (password column nullable in User table)</constraint>
    <constraint>Account linking security: email verification automatic for OAuth, no manual linking without authentication</constraint>
    <constraint>CSRF protection: NextAuth state parameter automatic, no custom implementation needed</constraint>
    <constraint>Session strategy: jwt (from Story 5.1), maxAge 30 days, session.user.id included in token</constraint>
    <constraint>OAuth scopes: minimal - Google (openid, email, profile), Facebook (email, public_profile)</constraint>
    <constraint>Testing: 80%+ coverage target, integration tests for OAuth flows, error scenarios, account linking</constraint>
    <constraint>Privacy: no sensitive data in logs, user-friendly error messages, no user enumeration</constraint>
    <constraint>HTTPS enforcement: OAuth callbacks require HTTPS in production (Vercel default)</constraint>
    <constraint>Icon library: Lucide React for Google (Chrome icon) and Facebook icons (already in use)</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>authConfig.providers</name>
      <kind>NextAuth configuration</kind>
      <signature>providers: [GoogleProvider({ clientId, clientSecret }), FacebookProvider({ clientId, clientSecret })]</signature>
      <path>lib/auth/config.ts</path>
    </interface>
    <interface>
      <name>authConfig.callbacks.signIn</name>
      <kind>NextAuth callback</kind>
      <signature>async signIn({ user, account, profile }) =&gt; Promise&lt;boolean | string&gt;</signature>
      <path>lib/auth/config.ts</path>
    </interface>
    <interface>
      <name>authConfig.callbacks.jwt</name>
      <kind>NextAuth callback</kind>
      <signature>async jwt({ token, account, profile }) =&gt; Promise&lt;JWT&gt;</signature>
      <path>lib/auth/config.ts</path>
    </interface>
    <interface>
      <name>authConfig.callbacks.session</name>
      <kind>NextAuth callback</kind>
      <signature>async session({ session, token }) =&gt; Promise&lt;Session&gt;</signature>
      <path>lib/auth/config.ts</path>
    </interface>
    <interface>
      <name>signIn function (client)</name>
      <kind>NextAuth client function</kind>
      <signature>signIn(provider: string, options?: { callbackUrl?: string, redirect?: boolean })</signature>
      <path>next-auth/react</path>
    </interface>
    <interface>
      <name>GoogleProvider</name>
      <kind>NextAuth OAuth provider</kind>
      <signature>GoogleProvider({ clientId: string, clientSecret: string, authorization?: { params } })</signature>
      <path>next-auth/providers/google</path>
    </interface>
    <interface>
      <name>FacebookProvider</name>
      <kind>NextAuth OAuth provider</kind>
      <signature>FacebookProvider({ clientId: string, clientSecret: string })</signature>
      <path>next-auth/providers/facebook</path>
    </interface>
    <interface>
      <name>Prisma User.accounts</name>
      <kind>Prisma relation</kind>
      <signature>accounts: Account[] (one User, many Accounts for multi-provider support)</signature>
      <path>prisma/schema.prisma</path>
    </interface>
    <interface>
      <name>Prisma Account fields</name>
      <kind>Prisma model</kind>
      <signature>{ userId, type, provider, providerAccountId, refresh_token, access_token, expires_at, token_type, scope, id_token, session_state }</signature>
      <path>prisma/schema.prisma</path>
    </interface>
  </interfaces>
  <tests>
    <standards>
      Testing framework: Vitest with happy-dom environment. Coverage target: 80%+ (provider: v8). Coverage includes lib/**/*.ts and components/**/*.tsx. Testing Library (@testing-library/react, @testing-library/user-event) for component testing. OAuth provider mocking: use NextAuth mock providers for testing without real OAuth accounts. Integration tests for complete OAuth flows (button click to user creation/linking). Error scenario tests (cancellation, provider errors, email conflicts). Security tests (CSRF protection, token encryption, HTTPS enforcement). Accessibility tests (keyboard navigation, screen reader). Cross-browser tests if Playwright available (Chrome, Firefox, Safari, Edge). Test file naming: *.test.ts or *.test.tsx in __tests__ directories or co-located with source files.
    </standards>
    <locations>
      - lib/auth/__tests__/ (auth-related unit tests)
      - app/auth/__tests__/ (auth page component tests)
      - __tests__/integration/ (OAuth flow integration tests)
      - vitest.config.mts (test configuration)
      - vitest.setup.ts (test setup file)
    </locations>
    <ideas>
      <test id="1" acs="AC1">Test Google OAuth button renders with correct icon and label</test>
      <test id="2" acs="AC1">Test Google OAuth button click initiates signIn('google') with callbackUrl</test>
      <test id="3" acs="AC1">Test Google OAuth loading state (button disabled, spinner shown)</test>
      <test id="4" acs="AC2">Test Facebook OAuth button renders with correct icon and label</test>
      <test id="5" acs="AC2">Test Facebook OAuth button click initiates signIn('facebook') with callbackUrl</test>
      <test id="6" acs="AC2">Test Facebook OAuth loading state (button disabled, spinner shown)</test>
      <test id="7" acs="AC3">Integration test: First-time Google login creates User + Account records</test>
      <test id="8" acs="AC3">Integration test: First-time Facebook login creates User + Account records</test>
      <test id="9" acs="AC3">Test first-time OAuth user redirected to /dashboard after login</test>
      <test id="10" acs="AC3">Test OAuth user emailVerified field automatically set</test>
      <test id="11" acs="AC4">Integration test: Google account linking to existing email/password user</test>
      <test id="12" acs="AC4">Integration test: Facebook account linking to existing email/password user</test>
      <test id="13" acs="AC4">Test multiple Account records linked to single User</test>
      <test id="14" acs="AC4">Test user can sign in with any linked provider</test>
      <test id="15" acs="AC5">Test OAuth cancelled (user closes consent screen) shows info message</test>
      <test id="16" acs="AC5">Test OAuth provider error shows user-friendly error message</test>
      <test id="17" acs="AC5">Test email conflict error message displayed</test>
      <test id="18" acs="AC5">Test success message shown after successful OAuth login</test>
      <test id="19" acs="AC5">Test error messages use ShadCN Alert with destructive variant</test>
      <test id="20" acs="AC5">Test error messages announced to screen readers</test>
      <test id="21" acs="AC6">Test Google OAuth requests minimal scopes (openid, email, profile)</test>
      <test id="22" acs="AC6">Test Facebook OAuth requests minimal permissions (email, public_profile)</test>
      <test id="23" acs="AC7">Test CSRF protection via state parameter (NextAuth built-in)</test>
      <test id="24" acs="AC7">Test nonce parameter used for Google OpenID Connect</test>
      <test id="25" acs="AC7">Test OAuth tokens stored encrypted in Account table</test>
      <test id="26" acs="AC7">Test session cookies remain HTTP-only and secure</test>
      <test id="27" acs="all">Accessibility test: Social login buttons keyboard navigable</test>
      <test id="28" acs="all">Accessibility test: Social login buttons have proper aria-labels</test>
    </ideas>
  </tests>
</story-context>
