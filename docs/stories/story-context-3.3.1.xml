<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.1</storyId>
    <title>Sanity CMS Setup &amp; Configuration</title>
    <status>Ready</status>
    <generatedAt>2025-10-21</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-3.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a developer</asA>
    <iWant>Sanity CMS integrated with the Next.js application</iWant>
    <soThat>we can manage vehicle content through a headless CMS</soThat>
    <tasks>
- Task 1: Install Sanity Dependencies (AC: 1)
  - Install @sanity/client and next-sanity packages
  - Install @sanity/cli as dev dependency
  - Verify package versions compatibility with Next.js 15

- Task 2: Initialize Sanity Project (AC: 2, 4)
  - Run `npx @sanity/cli init` to create Sanity project
  - Select/create project ID from Sanity dashboard
  - Configure production and staging datasets
  - Set up project structure in `sanity/` directory
  - Deploy Sanity Studio to Sanity hosted service

- Task 3: Configure Sanity Client in Next.js (AC: 3, 6)
  - Create `lib/sanity/config.ts` with project configuration
  - Create `lib/sanity/client.ts` with Sanity client instances
  - Set up read-only client for server components
  - Set up authenticated client for webhook mutations
  - Configure API version (use current date YYYY-MM-DD)
  - Test connection with basic GROQ query

- Task 4: Configure Environment Variables (AC: 5)
  - Add NEXT_PUBLIC_SANITY_PROJECT_ID to .env.local
  - Add NEXT_PUBLIC_SANITY_DATASET to .env.local
  - Generate and add SANITY_API_TOKEN with Editor role
  - Add SANITY_WEBHOOK_SECRET for webhook signature verification
  - Configure environment variables in Vercel dashboard
  - Create sanity/.env for Studio-specific variables

- Task 5: Set Up Sanity Studio Configuration (AC: 7)
  - Create sanity/sanity.config.ts with project settings
  - Install deskTool plugin for content management
  - Install visionTool plugin for GROQ query playground
  - Customize Studio branding with Enthusiast Auto logo/colors
  - Configure desk structure for Vehicles section
  - Set up default ordering by creation date

- Task 6: Configure CORS and Security (AC: 6)
  - Add https://shop.enthusiastauto.com to allowed CORS origins
  - Add http://localhost:3000 for local development
  - Verify CORS settings in Sanity dashboard
  - Test Studio access from deployed URL
  - Ensure API token is stored securely (never committed)

- Task 7: Testing and Validation (AC: All)
  - Run Sanity Studio locally (cd sanity &amp;&amp; pnpm dev)
  - Create test document in Studio to verify functionality
  - Fetch test document from Next.js using Sanity client
  - Verify deployment at custom Studio URL
  - Write unit tests for Sanity client configuration
  - Test CORS from deployed production URL
  - Validate all environment variables are properly configured
    </tasks>
  </story>

  <acceptanceCriteria>
1. Sanity Studio installed and configured locally
2. Sanity project created with appropriate dataset (production/staging)
3. Sanity client configured in Next.js app for data fetching
4. Basic Sanity Studio deployed and accessible to content editors
5. Environment variables configured for Sanity project ID and dataset
6. Sanity API authentication working correctly
7. Sanity Studio customized with Enthusiast Auto branding
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR014: Sanity CMS Integration</section>
        <snippet>The system shall integrate with Sanity CMS to retrieve and display vehicle inventory data including images, specifications, pricing, and availability status (current/sold)</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR006: Content Management &amp; CMS Performance</section>
        <snippet>Sanity Studio shall enable non-technical editors to publish/update vehicle listings independently. Vehicle content updates in Sanity shall reflect on frontend within 60 seconds via ISR/webhook revalidation. Vehicle photo galleries shall support 10-30 high-resolution images per vehicle with optimized delivery.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Epic 3: Vehicle Inventory Integration (Phase 2)</section>
        <snippet>Goal: Integrate Sanity CMS for vehicle content management and create browsable vehicle inventory with rich media galleries. Covers Sanity Studio configuration with custom vehicle schemas, vehicle data models, listing pages, detail pages, photo galleries, and inventory status management (current/sold) with real-time updates.</snippet>
      </doc>
      <doc>
        <path>docs/tech-specs/epic-3-vehicle-inventory-tech-spec.md</path>
        <title>Epic 3 Technical Specification</title>
        <section>Story 3.1 Implementation</section>
        <snippet>Complete implementation guide covering: dependency installation (@sanity/client, next-sanity), project structure (sanity/ directory for Studio, lib/sanity/ for client), Sanity client configuration with read-only and authenticated instances (useCdn: false for ISR compatibility), Studio configuration with deskTool and visionTool plugins, environment variables setup, CORS configuration, and deployment to Sanity hosted service.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>ยง2.2 Server-Side Rendering Strategy (ISR)</section>
        <snippet>Vehicle pages use ISR with 60-second revalidation plus webhook-driven on-demand revalidation. Sanity webhooks trigger revalidatePath() on content updates to keep inventory current per NFR006 requirements. Pre-render 50 most popular vehicles at build time, edge cache for instant loads.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>ยง3.1 Database Schema (Sanity)</section>
        <snippet>Vehicle schema with fields: title, slug, year, model, trim, price, mileage, status (current/sold), images array (1-30 with hotspot), description, specifications object (engine, transmission, drivetrain, colors, VIN), serviceHistory array. Preview shows year+title with status indicator.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>lib/shopify/index.ts</path>
        <kind>reference-implementation</kind>
        <symbol>shopifyFetch, revalidateTag</symbol>
        <lines>1-50</lines>
        <reason>Reference pattern for CMS client integration - shows how Shopify GraphQL client is structured with query functions, error handling, and Next.js cache integration. Sanity client should follow similar patterns.</reason>
      </artifact>
      <artifact>
        <path>lib/constants.ts</path>
        <kind>configuration</kind>
        <symbol>SHOPIFY_GRAPHQL_API_ENDPOINT, TAGS</symbol>
        <lines>all</lines>
        <reason>Existing constants file where Sanity configuration constants should be added (API version, project defaults).</reason>
      </artifact>
      <artifact>
        <path>.env</path>
        <kind>environment-config</kind>
        <symbol>SHOPIFY_* variables</symbol>
        <lines>all</lines>
        <reason>Environment variables template - shows current env var pattern. Sanity variables (NEXT_PUBLIC_SANITY_PROJECT_ID, NEXT_PUBLIC_SANITY_DATASET, SANITY_API_TOKEN, SANITY_WEBHOOK_SECRET) need to be added following same naming convention.</reason>
      </artifact>
      <artifact>
        <path>lib/sanity/config.ts</path>
        <kind>to-be-created</kind>
        <symbol>sanityConfig</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Shared Sanity configuration object with projectId, dataset, apiVersion, useCdn settings. Referenced by both client instances.</reason>
      </artifact>
      <artifact>
        <path>lib/sanity/client.ts</path>
        <kind>to-be-created</kind>
        <symbol>sanity, sanityReadOnly</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Sanity client instances: (1) authenticated client with token for webhooks/mutations, (2) read-only client with CDN for server components. Uses @sanity/client createClient().</reason>
      </artifact>
      <artifact>
        <path>lib/sanity/queries.ts</path>
        <kind>to-be-created</kind>
        <symbol>placeholder for future GROQ queries</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Placeholder for GROQ queries (Story 3.2+ will add vehicle queries). Create empty file with export {} to establish pattern.</reason>
      </artifact>
      <artifact>
        <path>sanity/sanity.config.ts</path>
        <kind>to-be-created</kind>
        <symbol>defineConfig</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Sanity Studio configuration with deskTool, visionTool plugins, custom branding, desk structure for Vehicles section. Separate app from Next.js.</reason>
      </artifact>
      <artifact>
        <path>sanity/sanity.cli.ts</path>
        <kind>to-be-created</kind>
        <symbol>CLI configuration</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Sanity CLI configuration for deployment commands. Auto-generated by sanity init.</reason>
      </artifact>
      <artifact>
        <path>sanity/schemas/index.ts</path>
        <kind>to-be-created</kind>
        <symbol>schemas export</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Schema registry. Start with empty array [], Story 3.2 will add vehicle schema.</reason>
      </artifact>
      <artifact>
        <path>sanity/.env</path>
        <kind>to-be-created</kind>
        <symbol>SANITY_STUDIO_PROJECT_ID, SANITY_STUDIO_DATASET</symbol>
        <lines>N/A</lines>
        <reason>NEW FILE - Studio-specific environment variables (separate from Next.js .env).</reason>
      </artifact>
    </code>
    <dependencies>
      <category name="sanity-packages">
        <package name="@sanity/client" version="3.62.0" type="production">Core Sanity client for data fetching via GROQ queries</package>
        <package name="next-sanity" version="9.12.0" type="production">Next.js integration helpers for Sanity (provides utilities for ISR + Sanity)</package>
        <package name="@sanity/cli" version="3.62.0" type="development">CLI tool for project initialization and Studio deployment</package>
        <package name="sanity" version="3.62.0" type="sanity-studio">Sanity Studio framework (installed in sanity/ directory, separate from Next.js deps)</package>
        <package name="@sanity/vision" version="latest" type="sanity-studio">GROQ query playground plugin for debugging (Studio only)</package>
      </category>
      <category name="existing-next-packages">
        <package name="next" version="15.3.0-canary.13" type="production">Next.js App Router framework - provides revalidatePath for webhook integration</package>
        <package name="react" version="19.0.0" type="production">React for Studio UI components</package>
        <package name="typescript" version="5.8.2" type="development">TypeScript for type-safe Sanity client code</package>
      </category>
      <category name="deployment-infrastructure">
        <service name="Vercel" usage="Next.js app deployment with environment variables for Sanity credentials"/>
        <service name="Sanity Hosted Studio" usage="Studio deployment at https://enthusiast-auto.sanity.studio"/>
        <service name="Sanity Content Lake" usage="CMS backend for vehicle data storage and API"/>
      </category>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Next.js 15 App Router with Server Components - Default to server-side, use 'use client' only when necessary for interactivity</constraint>
    <constraint>TypeScript strict mode - All Sanity client code must be fully typed with proper error handling</constraint>
    <constraint>Sanity v3 compatibility - Use @sanity/client@3.x and next-sanity@9.x for Next.js 15 compatibility</constraint>
    <constraint>ISR caching strategy - Disable CDN in main Sanity client (useCdn: false) because Next.js ISR handles caching at framework level</constraint>
    <constraint>Separate deployments - Sanity Studio deploys to Sanity hosted service (https://enthusiast-auto.sanity.studio), not embedded in Next.js app</constraint>
    <constraint>Dual client pattern - Maintain two Sanity client instances: (1) authenticated with token for webhooks/mutations, (2) read-only with CDN for server component fetches</constraint>
    <constraint>Environment variable security - SANITY_API_TOKEN must NEVER be committed to Git, only in .env.local and Vercel dashboard</constraint>
    <constraint>CORS configuration - Must add https://shop.enthusiastauto.com and http://localhost:3000 to allowed origins in Sanity dashboard</constraint>
    <constraint>API version pinning - Use current date YYYY-MM-DD format (e.g., '2024-10-21') for apiVersion to lock API behavior</constraint>
    <constraint>Dataset separation - Use 'production' dataset for live data, 'staging' for development/testing</constraint>
    <constraint>Published documents only - Use perspective: 'published' in client config to exclude draft content from frontend</constraint>
    <constraint>Vision plugin restriction - visionTool should only be enabled in development, not in production Studio build</constraint>
    <constraint>Branding customization - Studio must use Enthusiast Auto branding (logo, colors) via studio.components.logo configuration</constraint>
    <constraint>Project structure convention - Sanity files in sanity/ directory (separate app), Next.js integration files in lib/sanity/</constraint>
    <constraint>Build validation - All code must pass TypeScript strict compilation and Prettier formatting before commit</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>@sanity/client createClient API</name>
      <kind>npm-package</kind>
      <signature>createClient({ projectId, dataset, apiVersion, useCdn, token?, perspective? })</signature>
      <path>node_modules/@sanity/client</path>
    </interface>
    <interface>
      <name>sanity.fetch() GROQ API</name>
      <kind>client-method</kind>
      <signature>sanity.fetch&lt;T&gt;(query: string, params?: Record&lt;string, any&gt;): Promise&lt;T&gt;</signature>
      <path>lib/sanity/client.ts</path>
    </interface>
    <interface>
      <name>Sanity defineConfig API</name>
      <kind>studio-config</kind>
      <signature>defineConfig({ name, title, projectId, dataset, plugins, schema, studio })</signature>
      <path>sanity/sanity.config.ts</path>
    </interface>
    <interface>
      <name>deskTool plugin API</name>
      <kind>sanity-plugin</kind>
      <signature>deskTool({ structure: (S) =&gt; S.list().items([...]) })</signature>
      <path>sanity/node_modules/sanity/desk</path>
    </interface>
    <interface>
      <name>visionTool plugin API</name>
      <kind>sanity-plugin</kind>
      <signature>visionTool() - GROQ query playground for debugging</signature>
      <path>sanity/node_modules/@sanity/vision</path>
    </interface>
    <interface>
      <name>Next.js revalidatePath API</name>
      <kind>next-cache</kind>
      <signature>revalidatePath(path: string) - On-demand ISR revalidation for webhook integration</signature>
      <path>next/cache</path>
    </interface>
    <interface>
      <name>Environment Variables</name>
      <kind>process.env</kind>
      <signature>NEXT_PUBLIC_SANITY_PROJECT_ID, NEXT_PUBLIC_SANITY_DATASET, SANITY_API_TOKEN, SANITY_WEBHOOK_SECRET</signature>
      <path>.env.local, Vercel dashboard</path>
    </interface>
    <interface>
      <name>Sanity Dashboard APIs</name>
      <kind>web-interface</kind>
      <signature>Project creation, dataset management, API token generation, CORS configuration, Studio deployment</signature>
      <path>https://sanity.io/manage</path>
    </interface>
  </interfaces>
  <tests>
    <standards>
Testing framework not yet established in project. Story 3.1 testing will be primarily manual validation with some basic automated tests. Recommended approach: Jest + React Testing Library for unit/integration tests, Playwright already installed for E2E. Manual testing critical for CMS setup: verify Sanity Studio loads locally, test GROQ query execution, validate CORS from deployed URLs, confirm webhook signature verification. Automated tests should cover Sanity client configuration (projectId, dataset, apiVersion), connection health checks, and basic GROQ query execution. TypeScript compilation serves as first-level validation for type safety.
    </standards>
    <locations>
      <location>__tests__/lib/sanity/ - Unit tests for Sanity client configuration</location>
      <location>Manual testing: Local Studio (cd sanity &amp;&amp; pnpm dev)</location>
      <location>Manual testing: Deployed Studio at https://enthusiast-auto.sanity.studio</location>
      <location>Manual testing: Sanity dashboard (sanity.io/manage) for CORS/token validation</location>
      <location>Build validation: pnpm build to verify TypeScript compilation</location>
    </locations>
    <ideas>
      <!-- AC1: Sanity Studio installed and configured locally -->
      <test ac="1" task="1" priority="high">Verify @sanity/client, next-sanity, and @sanity/cli packages installed in package.json with correct versions</test>
      <test ac="1" task="2" priority="high">Run `cd sanity &amp;&amp; pnpm dev` and verify Studio loads at http://localhost:3333 without errors</test>
      <test ac="1" task="2" priority="medium">Verify sanity/ directory structure exists with sanity.config.ts, sanity.cli.ts, schemas/index.ts</test>

      <!-- AC2: Sanity project created with datasets -->
      <test ac="2" task="2" priority="high">Confirm project ID exists in Sanity dashboard and matches NEXT_PUBLIC_SANITY_PROJECT_ID</test>
      <test ac="2" task="2" priority="high">Verify production dataset created and accessible in dashboard</test>
      <test ac="2" task="2" priority="medium">Verify staging dataset created for development/testing</test>

      <!-- AC3: Sanity client configured in Next.js -->
      <test ac="3" task="3" priority="high">Verify lib/sanity/config.ts exports sanityConfig with projectId, dataset, apiVersion, useCdn: false</test>
      <test ac="3" task="3" priority="high">Verify lib/sanity/client.ts exports sanity (authenticated) and sanityReadOnly clients</test>
      <test ac="3" task="3" priority="high">Test basic GROQ query: sanity.fetch('*[_type == "vehicle"][0]') executes without errors (may return null if no documents)</test>
      <test ac="3" task="3" priority="medium">Verify authenticated client includes token, read-only client has useCdn: true</test>

      <!-- AC4: Studio deployed and accessible -->
      <test ac="4" task="2" priority="high">Run `cd sanity &amp;&amp; pnpm sanity deploy` and verify successful deployment</test>
      <test ac="4" task="2" priority="high">Access deployed Studio at https://enthusiast-auto.sanity.studio and verify login works</test>
      <test ac="4" task="7" priority="medium">Verify custom Studio URL configured correctly (not default random subdomain)</test>

      <!-- AC5: Environment variables configured -->
      <test ac="5" task="4" priority="high">Verify NEXT_PUBLIC_SANITY_PROJECT_ID exists in .env.local and Vercel dashboard</test>
      <test ac="5" task="4" priority="high">Verify NEXT_PUBLIC_SANITY_DATASET exists in .env.local (value: "production")</test>
      <test ac="5" task="4" priority="high">Verify SANITY_API_TOKEN exists in .env.local with Editor role permissions</test>
      <test ac="5" task="4" priority="high">Verify SANITY_WEBHOOK_SECRET generated and configured</test>
      <test ac="5" task="4" priority="medium">Verify sanity/.env exists with SANITY_STUDIO_PROJECT_ID and SANITY_STUDIO_DATASET</test>
      <test ac="5" task="4" priority="low">Confirm .env.local is in .gitignore (security check - never commit secrets)</test>

      <!-- AC6: API authentication working -->
      <test ac="6" task="3" priority="high">Test authenticated client can fetch data: sanity.fetch('*[_type == "vehicle"]') succeeds</test>
      <test ac="6" task="6" priority="high">Verify CORS settings in Sanity dashboard include https://shop.enthusiastauto.com</test>
      <test ac="6" task="6" priority="high">Verify CORS settings include http://localhost:3000 for local development</test>
      <test ac="6" task="7" priority="medium">Test API token has correct permissions (Editor role) by attempting a write operation</test>
      <test ac="6" task="7" priority="medium">Verify webhook signature verification works with SANITY_WEBHOOK_SECRET</test>

      <!-- AC7: Studio branding customized -->
      <test ac="7" task="5" priority="medium">Verify Studio displays "Enthusiast Auto Content Manager" title in browser tab</test>
      <test ac="7" task="5" priority="medium">Verify custom logo component renders "Enthusiast Auto" heading in Studio UI</test>
      <test ac="7" task="5" priority="low">Verify desk structure shows "Vehicles" section in navigation</test>
      <test ac="7" task="5" priority="low">Verify visionTool plugin accessible for GROQ query testing</test>

      <!-- Integration tests -->
      <test ac="all" task="7" priority="high">Create test document in Studio, verify it appears in Sanity dashboard</test>
      <test ac="all" task="7" priority="high">Fetch test document from Next.js using sanity.fetch(), verify data matches</test>
      <test ac="all" task="7" priority="medium">Run TypeScript build: `pnpm build` succeeds with no type errors in Sanity client files</test>
      <test ac="all" task="7" priority="medium">Run Prettier: `pnpm prettier:check` passes on all Sanity config files</test>

      <!-- Automated unit tests -->
      <test ac="3,5" task="7" priority="low">Unit test: Sanity client config has correct projectId from env var</test>
      <test ac="3,5" task="7" priority="low">Unit test: Sanity client config has correct dataset from env var</test>
      <test ac="3" task="7" priority="low">Unit test: Main client has useCdn: false, read-only client has useCdn: true</test>
      <test ac="3" task="7" priority="low">Unit test: Authenticated client includes token, perspective: 'published'</test>
    </ideas>
  </tests>
</story-context>
