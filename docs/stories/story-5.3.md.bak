# Story 5.3: User Profile & Account Settings

Status: Ready

## Story

**As a** registered user,
**I want to** manage my profile information and account settings,
**so that** I can keep my information up-to-date and control my account preferences.

## Acceptance Criteria

1. **AC1: Profile Page Display**
   - Profile page accessible at `/account/profile` (protected route)
   - Page displays user information: name, email, avatar/image, account creation date
   - Email address shown as read-only (cannot be changed directly)
   - Avatar/profile image displayed with fallback to initials if no image
   - Account type indicator showing authentication method(s): email/password, Google, Facebook
   - Page uses ShadCN components (Card, Avatar, Label, Badge) for consistent UI
   - Responsive layout works on mobile, tablet, desktop viewports
   - Loading state shown while fetching user data
   - Breadcrumb navigation: Dashboard > Profile

2. **AC2: Edit Profile Information**
   - "Edit Profile" button toggles form into edit mode
   - Editable fields: name, avatar image upload
   - Name field validation: required, 2-50 characters, trimmed whitespace
   - Avatar upload supports common image formats (JPEG, PNG, WebP, max 5MB)
   - Image upload shows preview before saving
   - Image automatically resized/optimized (max 512x512px) for performance
   - "Save Changes" button commits updates to database
   - "Cancel" button reverts changes and returns to view mode
   - Form uses ShadCN Input, Button, Label components
   - Client-side validation provides immediate feedback
   - Server-side validation ensures data integrity
   - Success message after successful update: "Profile updated successfully"
   - Error handling for upload failures, network errors, validation errors

3. **AC3: Change Password for Email/Password Accounts**
   - "Change Password" section visible only for users with email/password authentication
   - Section hidden for OAuth-only users (prompt to add password shown instead)
   - Change password form fields: current password, new password, confirm new password
   - Password requirements enforced: minimum 8 characters, uppercase, lowercase, number
   - Current password validated against database before allowing change
   - New password must differ from current password
   - Password strength indicator shows weak/medium/strong as user types
   - Successful password change invalidates all existing sessions (re-login required)
   - User redirected to signin page with message: "Password changed successfully. Please log in again."
   - Error handling: incorrect current password, weak new password, password mismatch
   - Form accessible via keyboard navigation and screen readers

4. **AC4: Manage Saved Addresses (Shipping and Billing)**
   - "Addresses" section shows list of saved addresses
   - Each address displays: label (Home, Work, etc.), street, city, state, zip, country
   - "Add New Address" button opens address form modal/drawer
   - Address form fields: label, street address, city, state/province, postal code, country, phone (optional)
   - Address validation using basic format checks (zip code format, required fields)
   - "Edit" button for each address opens form pre-filled with current data
   - "Delete" button with confirmation dialog: "Are you sure you want to delete this address?"
   - "Set as Default" option marks address as default shipping/billing address
   - Default address badge shown on applicable address
   - Addresses saved to Vercel Postgres User table (addresses JSON field) or separate Address table
   - Empty state when no addresses: "No saved addresses yet. Add your first address to speed up checkout."
   - Integration point: Addresses available for Shopify checkout (future enhancement)

5. **AC5: View Linked Social Accounts**
   - "Connected Accounts" section shows linked social authentication providers
   - Each linked account displays: provider name (Google, Facebook), linked email, link date
   - Google account shown with Google icon, Facebook with Facebook icon
   - "Unlink" button available if user has multiple authentication methods (prevents account lockout)
   - Unlink confirmation dialog: "Are you sure you want to unlink [provider]? You can re-link at any time."
   - If user only has one social account and no password, unlink button disabled with tooltip: "Add a password before unlinking your only authentication method."
   - "Link [Provider]" button shown for unlinked providers (Google, Facebook)
   - Linking new account initiates OAuth flow (same as signin OAuth flow)
   - Successful link shows success message: "[Provider] account linked successfully."
   - Empty state for email/password-only users: "No social accounts linked. Link Google or Facebook for faster login."

6. **AC6: Delete Account**
   - "Delete Account" button in "Danger Zone" section at bottom of page
   - Button styled with destructive variant (red) and icon to indicate severity
   - Clicking button opens confirmation modal with detailed warning text
   - Warning explains data deletion: "This will permanently delete your account, profile, favorites, and all associated data. This action cannot be undone."
   - Confirmation requires typing "DELETE" in text input to proceed (prevents accidental deletion)
   - Additional checkbox: "I understand this action is permanent and cannot be undone"
   - "Cancel" and "Permanently Delete Account" buttons in modal
   - Account deletion removes User record from database (cascades to related data: sessions, favorites, addresses)
   - User signed out immediately after deletion
   - Redirect to homepage with message: "Your account has been deleted. We're sorry to see you go."
   - Privacy policy compliance: User data fully removed from database (GDPR right to deletion)

7. **AC7: Form Validation and User Feedback**
   - All forms validate on blur and on submit
   - Inline error messages shown below invalid fields with red text
   - Error messages clear and specific: "Name is required", "Password must be at least 8 characters"
   - Success messages shown using ShadCN Toast component (top-right corner, auto-dismiss 3s)
   - Loading states shown during API requests (spinner, disabled buttons)
   - Network errors display user-friendly message: "Something went wrong. Please try again."
   - Form accessibility: ARIA labels, error announcements to screen readers, keyboard navigation
   - Unsaved changes warning if user navigates away with pending edits (browser confirm dialog)

8. **AC8: Database Schema and API Integration**
   - User profile updates via API route: `PATCH /api/user/profile`
   - Password change via API route: `POST /api/user/password`
   - Addresses managed via API routes: `GET/POST/PATCH/DELETE /api/user/addresses`
   - Account deletion via API route: `DELETE /api/user/account` with confirmation token
   - All API routes protected by NextAuth middleware (require valid session)
   - API routes return 401 Unauthorized for unauthenticated requests
   - API routes return 403 Forbidden if user attempts to modify another user's data
   - Optimistic UI updates where appropriate (immediate feedback while API processes)
   - Database transactions for critical operations (password change, account deletion)

9. **AC9: Security and Privacy Compliance**
   - Profile page requires authentication (middleware protection)
   - User can only view/edit their own profile (enforce userId match in API)
   - Password change requires current password verification (prevent unauthorized changes)
   - Account deletion requires explicit confirmation (prevent accidental/malicious deletion)
   - Session invalidation after password change (force re-login for security)
   - Payment information handled entirely by Shopify (zero PCI compliance scope in our app)
   - Avatar image uploads scanned for malicious content (future enhancement: virus scanning)
   - User data deletion complies with GDPR right to deletion
   - Privacy policy accessible from profile page footer
   - No sensitive data exposed in API responses (passwords hashed, tokens redacted)

## Tasks / Subtasks

- [x] Task 1: Create Profile Page UI (AC: 1, 2, 8)
  - [ ] Subtask 1.1: Create `app/account/profile/page.tsx` with protected route
  - [ ] Subtask 1.2: Fetch user data using NextAuth `getServerSession()` in server component
  - [ ] Subtask 1.3: Display user information: name, email, avatar, account creation date
  - [ ] Subtask 1.4: Show authentication method badges (email, Google, Facebook)
  - [ ] Subtask 1.5: Add ShadCN Card, Avatar, Label, Badge components for layout
  - [ ] Subtask 1.6: Implement breadcrumb navigation (Dashboard > Profile)
  - [ ] Subtask 1.7: Add loading state using Suspense or skeleton components
  - [ ] Subtask 1.8: Style responsive layout for mobile, tablet, desktop
  - [ ] Subtask 1.9: Test profile page accessibility (keyboard navigation, screen reader)

- [ ] Task 2: Build Edit Profile Form (AC: 2, 8)
  - [ ] Subtask 2.1: Add "Edit Profile" button to toggle edit mode
  - [ ] Subtask 2.2: Create edit form with ShadCN Input, Button components
  - [ ] Subtask 2.3: Make name field editable with validation (2-50 chars, required)
  - [ ] Subtask 2.4: Add avatar image upload field with file input
  - [ ] Subtask 2.5: Implement image upload preview before saving
  - [ ] Subtask 2.6: Add image size/format validation (JPEG, PNG, WebP, max 5MB)
  - [ ] Subtask 2.7: Implement image resize/optimization (max 512x512px) using next/image or sharp
  - [ ] Subtask 2.8: Create API route `app/api/user/profile/route.ts` for PATCH requests
  - [ ] Subtask 2.9: Update User record in database with new name and image URL
  - [ ] Subtask 2.10: Handle image upload to Vercel Blob or Cloudinary storage
  - [ ] Subtask 2.11: Add "Save Changes" and "Cancel" buttons with proper state management
  - [ ] Subtask 2.12: Show success toast message after successful update
  - [ ] Subtask 2.13: Handle errors (network, validation, upload failures) with user messages

- [ ] Task 3: Implement Change Password Feature (AC: 3, 8)
  - [ ] Subtask 3.1: Create "Change Password" section in profile page
  - [ ] Subtask 3.2: Conditionally render section (only for email/password users)
  - [ ] Subtask 3.3: Add form fields: current password, new password, confirm new password
  - [ ] Subtask 3.4: Implement password strength indicator (weak/medium/strong)
  - [ ] Subtask 3.5: Validate password requirements client-side (8+ chars, mixed case, number)
  - [ ] Subtask 3.6: Create API route `app/api/user/password/route.ts` for POST requests
  - [ ] Subtask 3.7: Verify current password against database hash using bcrypt
  - [ ] Subtask 3.8: Ensure new password differs from current password
  - [ ] Subtask 3.9: Hash new password with bcrypt (12 rounds) and update database
  - [ ] Subtask 3.10: Invalidate all existing sessions (force re-login for security)
  - [ ] Subtask 3.11: Sign out user and redirect to signin page with success message
  - [ ] Subtask 3.12: Handle errors (incorrect current password, weak password, mismatch)

- [ ] Task 4: Build Addresses Management (AC: 4, 7)
  - [ ] Subtask 4.1: Create "Addresses" section in profile page
  - [ ] Subtask 4.2: Fetch saved addresses from database (User.addresses JSON or Address table)
  - [ ] Subtask 4.3: Display list of addresses with label, street, city, state, zip
  - [ ] Subtask 4.4: Add "Add New Address" button opening modal/drawer form
  - [ ] Subtask 4.5: Create address form with fields: label, street, city, state, zip, country, phone
  - [ ] Subtask 4.6: Implement address validation (required fields, zip format)
  - [ ] Subtask 4.7: Create API routes: `POST /api/user/addresses` (create), `PATCH /api/user/addresses/[id]` (update), `DELETE /api/user/addresses/[id]` (delete)
  - [ ] Subtask 4.8: Save addresses to database (JSON field or separate Address table)
  - [ ] Subtask 4.9: Add "Edit" button for each address (opens form with current data)
  - [ ] Subtask 4.10: Add "Delete" button with confirmation dialog
  - [ ] Subtask 4.11: Implement "Set as Default" toggle for default shipping/billing address
  - [ ] Subtask 4.12: Show default address badge on applicable address
  - [ ] Subtask 4.13: Add empty state message when no addresses saved
  - [ ] Subtask 4.14: Test address CRUD operations (create, read, update, delete)

- [ ] Task 5: Build Connected Accounts Section (AC: 5, 7)
  - [ ] Subtask 5.1: Create "Connected Accounts" section in profile page
  - [ ] Subtask 5.2: Fetch linked accounts from Account table (filter by userId)
  - [ ] Subtask 5.3: Display linked providers: Google, Facebook with icons and emails
  - [ ] Subtask 5.4: Add "Unlink" button for each linked account (if user has multiple auth methods)
  - [ ] Subtask 5.5: Disable unlink button if user only has one auth method (prevent lockout)
  - [ ] Subtask 5.6: Add tooltip explaining why unlink is disabled
  - [ ] Subtask 5.7: Create unlink confirmation dialog with warning text
  - [ ] Subtask 5.8: Implement unlink API endpoint: `DELETE /api/user/accounts/[provider]`
  - [ ] Subtask 5.9: Remove Account record from database for specified provider
  - [ ] Subtask 5.10: Add "Link [Provider]" button for unlinked providers (Google, Facebook)
  - [ ] Subtask 5.11: Implement OAuth link flow using NextAuth `signIn(provider, { redirect: false })`
  - [ ] Subtask 5.12: Show success message after successful link/unlink
  - [ ] Subtask 5.13: Add empty state for email-only users suggesting to link social accounts

- [ ] Task 6: Implement Delete Account Feature (AC: 6, 7, 9)
  - [ ] Subtask 6.1: Create "Danger Zone" section at bottom of profile page
  - [ ] Subtask 6.2: Add "Delete Account" button with destructive styling (red, warning icon)
  - [ ] Subtask 6.3: Create confirmation modal with detailed warning text
  - [ ] Subtask 6.4: Add text input requiring user to type "DELETE" to confirm
  - [ ] Subtask 6.5: Add checkbox: "I understand this action is permanent"
  - [ ] Subtask 6.6: Enable "Permanently Delete Account" button only when both conditions met
  - [ ] Subtask 6.7: Create API route: `DELETE /api/user/account` with confirmation validation
  - [ ] Subtask 6.8: Delete User record from database (cascades to sessions, favorites, addresses)
  - [ ] Subtask 6.9: Sign out user immediately after deletion
  - [ ] Subtask 6.10: Redirect to homepage with deletion confirmation message
  - [ ] Subtask 6.11: Test GDPR compliance (verify all user data removed from database)

- [ ] Task 7: API Routes and Server Logic (AC: 8, 9)
  - [ ] Subtask 7.1: Create `app/api/user/profile/route.ts` with PATCH handler
  - [ ] Subtask 7.2: Create `app/api/user/password/route.ts` with POST handler
  - [ ] Subtask 7.3: Create `app/api/user/addresses/route.ts` with GET, POST handlers
  - [ ] Subtask 7.4: Create `app/api/user/addresses/[id]/route.ts` with PATCH, DELETE handlers
  - [ ] Subtask 7.5: Create `app/api/user/accounts/[provider]/route.ts` with DELETE handler (unlink)
  - [ ] Subtask 7.6: Create `app/api/user/account/route.ts` with DELETE handler (full account deletion)
  - [ ] Subtask 7.7: Protect all routes with NextAuth middleware (require valid session)
  - [ ] Subtask 7.8: Enforce userId matching (users can only modify their own data)
  - [ ] Subtask 7.9: Return appropriate HTTP status codes (200, 400, 401, 403, 500)
  - [ ] Subtask 7.10: Implement error handling with user-friendly error messages
  - [ ] Subtask 7.11: Use Prisma transactions for critical operations (password change, deletion)
  - [ ] Subtask 7.12: Add API route unit tests for all endpoints

- [ ] Task 8: Form Validation and User Feedback (AC: 7)
  - [ ] Subtask 8.1: Implement client-side validation using React Hook Form and Zod schemas
  - [ ] Subtask 8.2: Add inline error messages below invalid fields (red text)
  - [ ] Subtask 8.3: Create reusable FormError component with ShadCN Alert
  - [ ] Subtask 8.4: Implement success toasts using ShadCN Toast component (auto-dismiss 3s)
  - [ ] Subtask 8.5: Add loading spinners during API requests (disable buttons)
  - [ ] Subtask 8.6: Add unsaved changes warning when navigating away (browser confirm)
  - [ ] Subtask 8.7: Ensure all forms accessible (ARIA labels, keyboard navigation)
  - [ ] Subtask 8.8: Test form error announcements with screen reader

- [ ] Task 9: Testing and QA (AC: all)
  - [ ] Subtask 9.1: Write unit tests for profile update logic
  - [ ] Subtask 9.2: Write unit tests for password change validation
  - [ ] Subtask 9.3: Write unit tests for address CRUD operations
  - [ ] Subtask 9.4: Write integration tests for profile page rendering
  - [ ] Subtask 9.5: Write integration tests for form submissions (profile, password, address)
  - [ ] Subtask 9.6: Write integration tests for account deletion flow
  - [ ] Subtask 9.7: Write tests for connected accounts linking/unlinking
  - [ ] Subtask 9.8: Run Lighthouse audit on profile page (accessibility, performance)
  - [ ] Subtask 9.9: Manual QA testing on mobile, tablet, desktop viewports
  - [ ] Subtask 9.10: Test with screen reader for accessibility compliance
  - [ ] Subtask 9.11: Verify 80%+ test coverage for profile code
  - [ ] Subtask 9.12: Security testing: verify unauthorized access prevented (different user's profile)
  - [ ] Subtask 9.13: GDPR compliance test: verify account deletion removes all user data

## Dev Notes

**Architecture Patterns:**
- **NextAuth Session Integration:** Profile page uses `getServerSession()` to fetch authenticated user data server-side, ensuring user can only access their own profile
- **Protected Route Pattern:** `/account/profile` protected by middleware from Story 5.1, redirects unauthenticated users to signin
- **Shopify Customer API Integration:** Payment methods fetched from Shopify Customer API for users with purchase history, leveraging Shopify's PCI-compliant payment storage
- **Address Storage Strategy:** Addresses stored in Vercel Postgres (User.addresses JSON field or separate Address table), available for future Shopify checkout integration
- **Multi-Auth Support:** Profile adapts UI based on authentication methods (email/password vs OAuth), conditional rendering of password change section
- **Security-First Design:** Password changes require current password verification, account deletion requires explicit confirmation, session invalidation after sensitive operations

**Profile Page Structure (per solution-architecture.md):**
```
/account/profile (Protected Route)
├── Profile Information Section
│   ├── Avatar/Image (editable, upload)
│   ├── Name (editable)
│   ├── Email (read-only)
│   └── Account Created Date (read-only)
├── Change Password Section (conditional: email/password users only)
│   ├── Current Password
│   ├── New Password
│   └── Confirm New Password
├── Addresses Section
│   ├── Address List (display cards)
│   ├── Add New Address (modal form)
│   ├── Edit Address (modal form)
│   └── Delete Address (confirmation dialog)
├── Connected Accounts Section
│   ├── Linked Providers (Google, Facebook)
│   ├── Unlink Account (with validation)
│   └── Link New Account (OAuth flow)
└── Danger Zone Section
    └── Delete Account (confirmation modal)
```

**Note on Payment Methods:**
Payment methods are intentionally NOT managed in this application. Users manage payment information directly through Shopify's secure checkout flow and Shopify account management. This approach:
- Eliminates PCI compliance requirements for our application
- Reduces security surface area and liability
- Leverages Shopify's proven, secure payment infrastructure
- Simplifies development and maintenance

**Database Schema Updates (Prisma):**
```prisma
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   // Null for OAuth-only users
  image         String?   // Avatar URL (Vercel Blob or Cloudinary)
  addresses     Json?     // JSON array of address objects (optional: separate Address table)
  accounts      Account[] // Linked OAuth accounts (from Story 5.1)
  sessions      Session[]
  favorites     UserFavorite[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

// Optional: Separate Address table for better normalization
model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  label      String   // "Home", "Work", etc.
  street     String
  city       String
  state      String
  postalCode String
  country    String   @default("USA")
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}
```

**API Routes:**
```typescript
// Profile Update
PATCH /api/user/profile
Body: { name?: string, image?: string }
Response: { success: boolean, user: User }

// Password Change
POST /api/user/password
Body: { currentPassword: string, newPassword: string }
Response: { success: boolean }

// Address CRUD
GET    /api/user/addresses -> { addresses: Address[] }
POST   /api/user/addresses -> { address: Address }
PATCH  /api/user/addresses/[id] -> { address: Address }
DELETE /api/user/addresses/[id] -> { success: boolean }

// Account Linking
DELETE /api/user/accounts/[provider] -> { success: boolean }

// Account Deletion
DELETE /api/user/account
Body: { confirmation: string } // Must equal "DELETE"
Response: { success: boolean }
```

**Testing Standards:**
- **Unit Tests:** Profile update logic, password validation, address validation
- **Integration Tests:** Form submissions, API route handlers, database operations
- **Component Tests:** Profile page rendering, form interactions, conditional rendering
- **Security Tests:** Unauthorized access prevention, password verification, session invalidation
- **Accessibility Tests:** Keyboard navigation, screen reader compatibility, ARIA attributes
- **GDPR Compliance Tests:** Verify account deletion removes all user data from database

**Performance Considerations:**
- **Server-Side Rendering:** Profile page uses Next.js 15 server components for initial render, reduces client-side data fetching
- **Image Optimization:** Avatar uploads resized to 512x512px, stored in Vercel Blob with automatic CDN delivery
- **Shopify API Caching:** Payment methods cached for 5 minutes to reduce API calls
- **Optimistic UI Updates:** Immediate feedback for form submissions while API processes in background
- **Lazy Loading:** Payment methods section lazy-loaded only when user expands section (optional enhancement)

**Security Best Practices:**
- **Authentication Required:** All profile operations require valid NextAuth session
- **Authorization Checks:** API routes verify userId matches session.user.id (prevent profile tampering)
- **Password Verification:** Current password required before changing password (prevent unauthorized changes)
- **Session Invalidation:** Password changes invalidate all sessions (force re-login for security)
- **Confirmation Required:** Account deletion requires typing "DELETE" and checkbox confirmation
- **PCI Compliance:** Payment information never stored in app database (handled by Shopify)
- **Image Upload Security:** File size and format validation, future: virus scanning integration
- **GDPR Compliance:** Account deletion removes all user data (right to deletion)
- **No Sensitive Data Exposure:** API responses never expose passwords, tokens, or full payment details

**Privacy and Compliance:**
- **GDPR Right to Deletion:** Account deletion permanently removes User record and cascades to related data (sessions, favorites, addresses)
- **CCPA Compliance:** User can request data deletion via account deletion feature
- **Privacy Policy Link:** Profile page footer includes link to privacy policy
- **Data Minimization:** Only collect necessary profile data (name, email, avatar, addresses)
- **Transparent Data Usage:** Clear explanations of what data is stored and how it's used

### Project Structure Notes

**Alignment with Unified Project Structure:**
- `app/account/profile/page.tsx` - Profile page (new file, follows /account/* route structure from solution-architecture.md)
- `app/api/user/profile/route.ts` - Profile update API (new file)
- `app/api/user/password/route.ts` - Password change API (new file)
- `app/api/user/addresses/route.ts` - Addresses CRUD API (new file)
- `app/api/user/accounts/[provider]/route.ts` - Account unlinking API (new file)
- `app/api/user/account/route.ts` - Account deletion API (new file)
- `lib/auth/session.ts` - Extend with profile helpers (existing from Story 5.1)
- `components/account/` - New directory for profile-specific components (ProfileForm, AddressCard, etc.)
- `prisma/schema.prisma` - Update User model with addresses field (or add Address table)
- Middleware protection already in place from Story 5.1 (`middleware.ts` protects `/account/*`)

**New Dependencies:**
- `@vercel/blob` - Avatar image upload to Vercel Blob storage (optional: use Cloudinary instead)
- `sharp` - Image resize/optimization (optional: use next/image built-in optimization)
- `react-hook-form` - Form state management (likely already installed)
- `zod` - Form validation schemas (likely already installed)

**No Detected Conflicts:**
- Profile page builds on authentication foundation from Story 5.1 (NextAuth, sessions, User model)
- Connected Accounts section reuses Account table and OAuth logic from Story 5.2
- API routes follow existing pattern from Story 5.1 (protected routes, Prisma operations)
- ShadCN components already integrated in Phase 1 and Story 5.1
- Middleware protection already configured in Story 5.1

**Lessons Learned from Previous Stories:**
- From Story 5.1: NextAuth session management, Prisma User model, protected route patterns, form validation
- From Story 5.2: OAuth account linking logic, Account table structure, social auth UI patterns
- From Story 4.4: Server component data fetching, ISR caching strategies
- From all previous stories: TypeScript strict mode compliance, 80%+ test coverage, ShadCN component usage

### References

**Source Documents:**
- [Source: docs/epic-stories.md#Story 5.3 (lines 779-807)] - Acceptance criteria, prerequisites, technical notes, effort estimate (8 points)
- [Source: docs/PRD.md#FR016] - Functional requirement for user authentication (includes profile management)
- [Source: docs/PRD.md#NFR007] - Non-functional requirements for security and authentication
- [Source: docs/solution-architecture.md#Section 2.1 (line 225)] - /dashboard/profile route structure
- [Source: docs/solution-architecture.md#Section 3.1 (lines 447-458)] - Prisma User schema with profile fields
- [Source: docs/epic-stories.md#Epic 5 (lines 707-900)] - Context for User Management System epic (Story 5.1, 5.2 complete, 5.3 next)
- [Source: docs/stories/story-5.1.md] - Predecessor: Auth foundation (NextAuth, User model, sessions, middleware)
- [Source: docs/stories/story-5.2.md] - Predecessor: OAuth integration (Account linking, social auth patterns)
- [Source: docs/bmm-workflow-status.md (lines 39-46)] - Story 5.3 designated as TODO (next to implement)

## Dev Agent Record

### Context Reference

- `docs/stories/story-context-5.5.3.xml` (Generated: 2025-10-23)

### Agent Model Used

claude-sonnet-4-5-20250929

### Debug Log References

### Completion Notes List

### File List

## Change Log

| Date | Author | Change Description |
|------|--------|-------------------|
| 2025-10-23 | claude-sonnet-4-5-20250929 | Initial story creation |
| 2025-10-23 | claude-sonnet-4-5-20250929 | Removed AC5 (Manage Saved Payment Methods) - security/PCI compliance decision to delegate all payment management to Shopify. Renumbered remaining ACs (6-10 → 5-9). Removed Task 5 and renumbered tasks accordingly. Updated from 10 to 9 acceptance criteria. |
